[{"/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/index.js":"1","/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/App.js":"2","/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/reportWebVitals.js":"3","/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/components/header/header.jsx":"4","/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/components/countries/countries.jsx":"5","/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/components/specificCountry/specificCountry.jsx":"6","/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/util/regions.js":"7","/Users/ayushdhananjai/2023_Projects/REST_Countries/src/index.js":"8","/Users/ayushdhananjai/2023_Projects/REST_Countries/src/reportWebVitals.js":"9","/Users/ayushdhananjai/2023_Projects/REST_Countries/src/components/countries/countries.jsx":"10","/Users/ayushdhananjai/2023_Projects/REST_Countries/src/components/header/header.jsx":"11","/Users/ayushdhananjai/2023_Projects/REST_Countries/src/components/specificCountry/specificCountry.jsx":"12","/Users/ayushdhananjai/2023_Projects/REST_Countries/src/util/regions.js":"13"},{"size":1035,"mtime":1673489223621,"results":"14","hashOfConfig":"15"},{"size":117,"mtime":1672820581315,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1672740913212,"results":"17","hashOfConfig":"15"},{"size":2114,"mtime":1673491328486,"results":"18","hashOfConfig":"15"},{"size":18920,"mtime":1673489844525,"results":"19","hashOfConfig":"15"},{"size":7132,"mtime":1673489490274,"results":"20","hashOfConfig":"15"},{"size":304,"mtime":1673089603675,"results":"21","hashOfConfig":"15"},{"size":1035,"mtime":1673489223000,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1672740913000,"results":"24","hashOfConfig":"23"},{"size":18920,"mtime":1673489844000,"results":"25","hashOfConfig":"23"},{"size":2114,"mtime":1673491328000,"results":"26","hashOfConfig":"23"},{"size":7540,"mtime":1673496137773,"results":"27","hashOfConfig":"23"},{"size":304,"mtime":1673089603000,"results":"28","hashOfConfig":"23"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vnbmz2",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"wq5zgl",{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/index.js",[],[],"/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/App.js",[],[],[],"/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/reportWebVitals.js",[],[],"/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/components/header/header.jsx",[],[],"/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/components/countries/countries.jsx",[],[],"/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/components/specificCountry/specificCountry.jsx",["71","72","73"],[],"import React from 'react';\nimport './specificCountry.css';\nimport {useState, useEffect} from 'react';\nimport {useParams} from 'react-router-dom';\nimport { useNavigate } from \"react-router-dom\";\n\nconst SpecificCountry = () => {\n\n    const obj = useParams();\n    const [currentCountryName, setCurrentCountryName] = useState(obj.specificCountryName);\n    const [currCountryBorders, setCurrCountryBorders] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [error, setError] = useState(\"\");\n    const [currCountryObj, setCurrCountryObject] = useState({});\n    const navigate = useNavigate();\n    const [currLanguages, setCurrLanguages] = useState('');\n\n\n    /**\n     * This retrieves the country's data\n     * @param {*} countryName \n     */\n    const retrieveSpecificCountryData = async (countryName) => {\n        // make the API call\n        const response = await fetch(`https://restcountries.com/v2/name/${countryName}/?fullText=true`, {\n                method: 'GET',\n                headers: {\n                    Accept: 'application/json',\n                },\n             });\n        // if we get don't get a 200 response we need to let the user know\n        if (!response.ok) {\n            setError(\"Unable to load the data for \" + obj.specificCountryName + \". Please reload the page and try again\");\n            return;\n        } \n        const specificCountryData = await response.json();\n        setCurrCountryObject(specificCountryData[0]);\n        setError('');\n        setIsLoaded(true);\n        \n        // if the country actually has borders, then we set the borders array\n        if (specificCountryData[0].borders !== undefined) {\n\n            // the borders are strings in an array so we need to join them and make the API call\n            // to get the list of countries\n            let joinedCodes = specificCountryData[0].borders.join();\n            const response1 = await fetch(`https://restcountries.com/v2/alpha?codes=${joinedCodes}`);\n\n            // again if we get anything but a 200 response, we need to let the user know\n            if (!response1.ok) {\n                setError(\"Unable to load border information. Please reload the page and try again\");\n                return;\n            } \n            \n            else {\n\n                // await the data \n                const jsonData = await response1.json();\n                let names = [];\n                for (let i = 0; i < jsonData.length; i++) {\n                    names.push(jsonData[i].name);\n                }\n                setIsLoaded(true);\n                setCurrCountryBorders(names);\n\n                // set the languages as one large string\n                let languages = '';\n                for (let i = 0; i < specificCountryData[0].languages.length; i++) {\n                    languages = languages + specificCountryData[0].languages[i].name + ', '\n                }\n                 \n                languages = languages.substring(0, languages.length - 2);\n                setCurrLanguages(languages);   \n            }            \n        }\n    }\n\n    /**\n     * Handler function to navigate to a new specificCountry page \n     * @param {*} countryName \n     */\n    const navigateToNewPage = (countryName) => {\n        navigate(`/specificCountry/${countryName}`, { replace: true });\n        navigate(0);\n\n    }\n\n    /**\n     * If the user presses back, then we need to go back\n     */\n    const navigateBack = () => {\n        navigate(-1);\n    }\n\n    /**\n     * This hook runs when first loading the page\n     */\n    useEffect(() => {\n        retrieveSpecificCountryData(currentCountryName);\n    }, []);\n\n    if (error !== '') {\n\n    } \n    else if (!isLoaded) {\n        return <div className=\"container loading_msg\">Loading...</div>\n    }\n    \n    else {\n        return (\n            <div className=\"parent\">\n                <div className=\"back_button pt-[150px]\">\n                    <button className=\"back_button_color shadow-[0_0_40px_rgba(0,0,0,0.2)] cursor-pointer hover:scale-105 hover:z-1 duration-300 dark:text-black dark:bg-white pl-6 pr-6 pt-2 pb-2\" uppercase=\"false\" onClick={() => navigateBack()}><i class=\"fas fa-arrow-left\"></i> Back</button>\n                </div>\n                <div className=\"flags_and_stats\">\n                    <div className=\"flag_left md:inline-block md:w-[50%]\">\n                        <img src={currCountryObj.flag} className=\"country_flag w-full object-cover h-full\"/>\n                    </div>\n                    <div className=\"information_right md:inline-block md:w-[50%]\">\n                        <div>\n                            <h5 className=\"country_name dark:text-black\">{currCountryObj.name}</h5>\n                        </div>\n                        <div className='stats_div flex flex-row' style={{color:'white'}}>\n                            <div className='top_stats'>\n                                <div className=\"dark:text-black\"> Native Name: {currCountryObj.nativeName}</div>\n                                {currCountryObj.population === undefined ? <div></div> : <div className=\"dark:text-black\">Population: {currCountryObj.population.toLocaleString()}</div>}\n                                <div className=\"dark:text-black\">Region: {currCountryObj.region}</div>\n                                <div className=\"dark:text-black\">Sub Region: {currCountryObj.subregion}</div>\n                                <div className=\"dark:text-black\">Capital: {currCountryObj.capital}</div>\n                            </div>\n                            <div className='bottom_stats'>\n                                {currCountryObj.topLevelDomain === undefined ? <div></div> : <div className=\"dark:text-black\">Top Level Domain: {currCountryObj.topLevelDomain[0]}</div>}\n                                {currCountryObj.currencies === undefined ? <div></div> : <div className=\"dark:text-black\"> Currencies: {currCountryObj.currencies.map((each) => each.name)}</div>}    \n                                {currCountryObj.languages === undefined ? <div></div> : <div className=\"dark:text-black\">Languages: {currLanguages}</div>}    \n                            </div>\n                        </div>\n\n                        <div style={{color:'white'}} className=\"sm:flex-wrap flex flex-row\">\n                            \n                            {currCountryBorders.length === 0 ?  <span> </span> : <><span className=\"dark:text-black\" style={{ color: 'white' }}> Borders: &nbsp; </span> <span id=\"borders\">\n                                {currCountryBorders.map((each) => (\n                                    <button className=\"back_button_color dark:text-black cursor-pointer hover:scale-105 hover:z-1 duration-300 dark:bg-white shadow-[0_0_40px_rgba(0,0,0,0.2)] mr-2 pl-4 pr-4 pt-2 pb-2 mb-2\" value={each} onClick={(e) => navigateToNewPage(e.target.value)}>{each}</button>))}\n                            </span></>}\n\n                            \n                            \n                        </div>    \n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SpecificCountry;","/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/util/regions.js",[],[],"/Users/ayushdhananjai/2023_Projects/REST_Countries/src/index.js",[],[],[],"/Users/ayushdhananjai/2023_Projects/REST_Countries/src/reportWebVitals.js",[],[],"/Users/ayushdhananjai/2023_Projects/REST_Countries/src/components/countries/countries.jsx",[],[],"/Users/ayushdhananjai/2023_Projects/REST_Countries/src/components/header/header.jsx",[],[],"/Users/ayushdhananjai/2023_Projects/REST_Countries/src/components/specificCountry/specificCountry.jsx",[],[],"/Users/ayushdhananjai/2023_Projects/REST_Countries/src/util/regions.js",[],[],{"ruleId":"74","severity":1,"message":"75","line":10,"column":32,"nodeType":"76","messageId":"77","endLine":10,"endColumn":53},{"ruleId":"78","severity":1,"message":"79","line":100,"column":8,"nodeType":"80","endLine":100,"endColumn":10,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":117,"column":25,"nodeType":"84","endLine":117,"endColumn":109},"no-unused-vars","'setCurrentCountryName' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentCountryName' and 'retrieveSpecificCountryData'. Either include them or remove the dependency array.","ArrayExpression",["85"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"86","fix":"87"},"Update the dependencies array to be: [currentCountryName, retrieveSpecificCountryData]",{"range":"88","text":"89"},[3638,3640],"[currentCountryName, retrieveSpecificCountryData]"]