{"ast":null,"code":"import _objectSpread from\"/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _regeneratorRuntime from\"/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from'react';import'./countries.css';import{useState,useEffect,useRef}from'react';import{Link}from\"react-router-dom\";import region_options from'../../util/regions';import Select from'react-select';import Box from'@mui/material/Box';import InputLabel from'@mui/material/InputLabel';import MenuItem from'@mui/material/MenuItem';import FormControl from'@mui/material/FormControl';// import Select from '@mui/material/Select';\nimport{FaSearch}from'react-icons/fa';/**\n * Represents all the countries - makes an API call to the countries API\n * upon loading the page\n * \n * @returns the Countries object\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Countries=function Countries(){/*\n        States:\n            allCountries: the local representation of the countries\n            isLoaded: a boolean flag that gets set to false once the\n                      countries have loaded\n            setError: if there is an error, this will show to the screen\n    */var _useState=useState([]),_useState2=_slicedToArray(_useState,2),allCountries=_useState2[0],setAllCountries=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isLoaded=_useState4[0],setIsLoaded=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),error=_useState6[0],setError=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),currSearchText=_useState8[0],setCurrSearchText=_useState8[1];var _useState9=useState(''),_useState10=_slicedToArray(_useState9,2),currRegion=_useState10[0],setCurrRegion=_useState10[1];var selectRegionRef=useRef();/**\n     * Load the initial state of the data from the API\n     */var retrieveAllData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var response,countries;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://restcountries.com/v2/all\",{method:'GET',headers:{Accept:'application/json'}});case 2:response=_context.sent;if(!response.ok){setError(\"There was an error retrieving the data. Please reload the page and try again\");}_context.next=6;return response.json();case 6:countries=_context.sent;// set the initial state in local storage\nlocalStorage.setItem(\"rest_countries_initial_state\",JSON.stringify(countries));// for (let i = 0; i < countries.length; i++) {\n//     let currCountry = countries[i];\n//     localStorage.setItem(currCountry.alpha3Code, currCountry.name);\n// }\n// set our state variables\nsetAllCountries(countries);setIsLoaded(true);case 10:case\"end\":return _context.stop();}},_callee);}));return function retrieveAllData(){return _ref.apply(this,arguments);};}();/*\n        gets called upon loading the page\n    */useEffect(function(){retrieveAllData();},[]);/**\n     * The call back function that gets executed whenever the user\n     * filters countries by region.\n     * @param {} selectedRegion \n     * @returns N/A\n     */var getCountriesByRegion=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(selectedRegion){var lowerCaseRegion,initialState,actualInitialState,filteredCountriesByRegion,i,currCountry,_initialState,_actualInitialState,_filteredCountriesByRegion,_i;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:// If we have selected an actual region, then we make the async call\nif(selectedRegion!=='all'){lowerCaseRegion=selectedRegion.toLowerCase();initialState=localStorage.getItem(\"rest_countries_initial_state\");actualInitialState=JSON.parse(initialState);filteredCountriesByRegion=[];// loop over the initial state \nfor(i=0;i<actualInitialState.length;i++){currCountry=actualInitialState[i];// if we have a previous search filter and we change the region, thn we need to let the user know\nif(currSearchText!==''){if(currCountry.region.toLowerCase()===lowerCaseRegion&&currCountry.name.toLowerCase().includes(currSearchText)){filteredCountriesByRegion.push(currCountry);}}// if the search bar is empty, then we just need to check the region\nelse{if(currCountry.region.toLowerCase()===lowerCaseRegion){filteredCountriesByRegion.push(currCountry);}}}// if there is a previous search bar word that isn't a valid country,\n// then we have to let the user know\nif(filteredCountriesByRegion.length===0){setError(\"Invalid search - Please try again\");setIsLoaded(true);}// \nelse{setAllCountries(filteredCountriesByRegion);setError(\"\");setIsLoaded(true);setCurrRegion(selectedRegion);}}// If the user selects all, then we just retrieve all the data again.\nelse{// retrieveAllData();\nsetCurrRegion('');_initialState=localStorage.getItem(\"rest_countries_initial_state\");_actualInitialState=JSON.parse(_initialState);_filteredCountriesByRegion=[];if(currSearchText!==''){for(_i=0;_i<_actualInitialState.length;_i++){if(_actualInitialState[_i].name.toLowerCase().includes(currSearchText.toLowerCase())){_filteredCountriesByRegion.push(_actualInitialState[_i]);}}setAllCountries(_filteredCountriesByRegion);setError(\"\");}else{setAllCountries(_actualInitialState);setError(\"\");setIsLoaded(true);}// window.location.reload();\n}case 1:case\"end\":return _context2.stop();}},_callee2);}));return function getCountriesByRegion(_x){return _ref2.apply(this,arguments);};}();/**\n     * The call back function that gets executed whenever\n     * a new character is being typed in the search bar \n     * @param searchVal the country we are searching for\n     */var getCountriesBySearch=function getCountriesBySearch(searchVal){// only if we have typed something do we execute the code\nif(searchVal!==''){var lowerCaseSearchVal=searchVal.toLowerCase();var initialState=localStorage.getItem(\"rest_countries_initial_state\");var actualInitialState=JSON.parse(initialState);var filteredCountries=[];for(var i=0;i<actualInitialState.length;i++){var currCountry=actualInitialState[i];if(currRegion.toLowerCase()!=='all'&&currRegion!==''){if(currCountry.region.toLowerCase()===currRegion.toLowerCase()){if(currCountry.name.toLowerCase().includes(lowerCaseSearchVal)){filteredCountries.push(currCountry);}}}else if(currRegion.toLowerCase()==='all'||currRegion===''){if(currCountry.name.toLowerCase().includes(lowerCaseSearchVal)){filteredCountries.push(currCountry);}}}// If we haven't found any countries, then we need to \n// let the user know.\nif(filteredCountries.length===0){setError(\"Invalid search. Please try again.\");setIsLoaded(true);}// If we have found countries, then we set the error to be empty.\nelse{setError(\"\");setIsLoaded(true);setAllCountries(filteredCountries);}}// if there is nothing in the search bar, then we simply retrieve the countries\n// from local storage\nelse{var _initialState2=localStorage.getItem(\"rest_countries_initial_state\");var _actualInitialState2=JSON.parse(_initialState2);if(currRegion!==''){var filteredByCountries=[];for(var _i2=0;_i2<_actualInitialState2.length;_i2++){if(_actualInitialState2[_i2].region.toLowerCase()===currRegion.toLowerCase()){filteredByCountries.push(_actualInitialState2[_i2]);}}setAllCountries(filteredByCountries);}else{setAllCountries(_actualInitialState2);}}};/**\n     * If we have an error we need to let the user know\n     */if(error!==\"\"){return/*#__PURE__*/_jsx(\"div\",{className:\"global\",children:/*#__PURE__*/_jsxs(\"div\",{class:\"flex flex-row justify-between flex-wrap search_bar_and_filter\",children:[/*#__PURE__*/_jsx(\"div\",{class:\"flex justify-between search_bar\",children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:function onSubmit(e){return e.preventDefault();},children:[/*#__PURE__*/_jsx(\"div\",{class:\"relative\",children:/*#__PURE__*/_jsx(\"span\",{class:\"absolute inset-y-0 left-0 flex items-center pl-2\",children:/*#__PURE__*/_jsx(\"i\",{class:\"fal fa-search\"})})}),/*#__PURE__*/_jsx(\"input\",{placeholder:\"Search for a country...\",onChange:function onChange(e){var val=document.getElementById(\"actual_search_bar\").value;setCurrSearchText(val);getCountriesBySearch(val);},name:\"search\",type:\"text\",id:\"actual_search_bar\",value:currSearchText,class:\"h-10 w-96 rounded-md border-none search_bar_color pl-[30px]\"})]})}),/*#__PURE__*/_jsx(\"div\",{class:\"flex\"})]})});}/**\n     * skeleton loading - need to let the user know that the data is\n     * on its way, so the user isn't left sitting with an empty screen\n     * wondering what is going on.\n     */else if(!isLoaded){return/*#__PURE__*/_jsx(\"div\",{className:\"loading_msg text-9xl flex justify-center  place-items-center\",children:/*#__PURE__*/_jsx(\"center\",{children:\"Loading...\"})});}/**\n     * If everything works correctly, then we load the countries.\n     */else{return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"global flex flex-col\",children:[/*#__PURE__*/_jsxs(\"div\",{class:\"flex flex-row justify-between search_bar_and_filter flex-wrap\",children:[/*#__PURE__*/_jsx(\"div\",{class:\"search_bar sm:mr-[30%] z-1\",children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:function onSubmit(e){return e.preventDefault();},children:[/*#__PURE__*/_jsx(\"div\",{class:\"relative z-1\",children:/*#__PURE__*/_jsx(\"span\",{class:\"absolute inset-y-0 left-0 flex items-center pl-2\",children:/*#__PURE__*/_jsx(\"i\",{class:\"fal mt-12\",children:/*#__PURE__*/_jsx(FaSearch,{})})})}),/*#__PURE__*/_jsx(\"input\",{placeholder:\"Search for a country...\",onChange:function onChange(e){var val=document.getElementById(\"actual_search_bar\").value;setCurrSearchText(val);getCountriesBySearch(val);},name:\"search\",type:\"text\",id:\"actual_search_bar\",value:currSearchText,class:\"h-12 w-full rounded-md border-none search_bar_color pl-[30px]\"})]})}),/*#__PURE__*/_jsx(\"div\",{class:\"z-1 region_filter\",children:/*#__PURE__*/_jsx(Select,{className:\"region_filter\",options:region_options,value:region_options.value,onChange:function onChange(e){var selectedRegion=e.value;setCurrRegion(selectedRegion);getCountriesByRegion(selectedRegion);},components:{IndicatorSeparator:function IndicatorSeparator(){return null;}},styles:{control:function control(baseStyles,state){return _objectSpread(_objectSpread({},baseStyles),{},{border:'none',backgroundColor:state.isSelected?\"hsl(209,23%,22%)\":\"hsl(209,23%,22%)\",textDecoration:state.isSelected?\"white\":\"black\"});}},placeholder:\"Filter by Region\",ref:selectRegionRef})})]}),/*#__PURE__*/_jsx(\"div\",{class:\"grid grid-cols-1 md:grid-cols-3 sm:grid-cols-2 lg:grid-cols-4 gap-16 mt-5\",children:allCountries.map(function(each,idx){return/*#__PURE__*/_jsx(Link,{to:\"/specificCountry/\".concat(each.name),style:{textDecoration:'none',color:'white'},children:/*#__PURE__*/_jsxs(\"div\",{class:\"overflow-hidden rounded shadow-md h-full cursor-pointer hover:scale-105 hover:z-1 duration-300 mb-8  card_body \",children:[/*#__PURE__*/_jsx(\"img\",{src:each.flags.png,alt:\"country_image\",class:\"w-full h-32 object-cover\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"pl-4 flex flex-col\",children:[/*#__PURE__*/_jsx(\"h5\",{class:\"font-bold mt-4 card_title\",children:each.name}),/*#__PURE__*/_jsxs(\"span\",{class:\"block actual_population\",children:[\"Population: \",each.population.toLocaleString()]}),/*#__PURE__*/_jsxs(\"span\",{class:\"block actual_region\",children:[\"Region: \",each.region]}),/*#__PURE__*/_jsxs(\"span\",{class:\"block actual_capital\",children:[\"Capital: \",each.capital]})]})]})});})})]})});}};export default Countries;","map":{"version":3,"names":["React","useState","useEffect","useRef","Link","region_options","Select","Box","InputLabel","MenuItem","FormControl","FaSearch","Countries","allCountries","setAllCountries","isLoaded","setIsLoaded","error","setError","currSearchText","setCurrSearchText","currRegion","setCurrRegion","selectRegionRef","retrieveAllData","fetch","method","headers","Accept","response","ok","json","countries","localStorage","setItem","JSON","stringify","getCountriesByRegion","selectedRegion","lowerCaseRegion","toLowerCase","initialState","getItem","actualInitialState","parse","filteredCountriesByRegion","i","length","currCountry","region","name","includes","push","getCountriesBySearch","searchVal","lowerCaseSearchVal","filteredCountries","filteredByCountries","e","preventDefault","val","document","getElementById","value","IndicatorSeparator","control","baseStyles","state","border","backgroundColor","isSelected","textDecoration","map","each","idx","color","flags","png","population","toLocaleString","capital"],"sources":["/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/components/countries/countries.jsx"],"sourcesContent":["import React from 'react';\nimport './countries.css';\nimport {useState, useEffect, useRef} from 'react';\nimport { Link } from \"react-router-dom\";\nimport region_options from '../../util/regions';\nimport Select from 'react-select';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\n// import Select from '@mui/material/Select';\nimport {FaSearch} from 'react-icons/fa';\n\n/**\n * Represents all the countries - makes an API call to the countries API\n * upon loading the page\n * \n * @returns the Countries object\n */\nconst Countries = () => {\n\n    /*\n        States:\n            allCountries: the local representation of the countries\n            isLoaded: a boolean flag that gets set to false once the\n                      countries have loaded\n            setError: if there is an error, this will show to the screen\n    */\n    const [allCountries, setAllCountries] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [error, setError] = useState(\"\");\n    const [currSearchText, setCurrSearchText] = useState('');\n    const [currRegion, setCurrRegion] = useState('');\n    const selectRegionRef = useRef();\n\n\n    /**\n     * Load the initial state of the data from the API\n     */\n    const retrieveAllData = async () => {\n        const response = await fetch(`https://restcountries.com/v2/all`, {\n                method: 'GET',\n                headers: {\n                    Accept: 'application/json',\n                },\n             });\n        if (!response.ok) {\n            setError(\"There was an error retrieving the data. Please reload the page and try again\");\n        }\n        const countries = await response.json();\n        // set the initial state in local storage\n        localStorage.setItem(\"rest_countries_initial_state\", JSON.stringify(countries));\n\n        // for (let i = 0; i < countries.length; i++) {\n        //     let currCountry = countries[i];\n        //     localStorage.setItem(currCountry.alpha3Code, currCountry.name);\n        // }\n\n        // set our state variables\n        setAllCountries(countries);\n        setIsLoaded(true);\n    }\n\n\n    /*\n        gets called upon loading the page\n    */\n    useEffect(() => {\n        retrieveAllData();\n    },[]);\n\n    /**\n     * The call back function that gets executed whenever the user\n     * filters countries by region.\n     * @param {} selectedRegion \n     * @returns N/A\n     */\n    const getCountriesByRegion = async (selectedRegion) => {\n        // If we have selected an actual region, then we make the async call\n        if (selectedRegion !== 'all') {\n\n            let lowerCaseRegion = selectedRegion.toLowerCase();\n            let initialState = localStorage.getItem(\"rest_countries_initial_state\");\n            let actualInitialState = JSON.parse(initialState);\n            let filteredCountriesByRegion = [];\n\n            // loop over the initial state \n            for (let i = 0; i < actualInitialState.length; i++){\n                let currCountry = actualInitialState[i];\n                // if we have a previous search filter and we change the region, thn we need to let the user know\n                if (currSearchText !== '') {\n                    if (currCountry.region.toLowerCase() === lowerCaseRegion && currCountry.name.toLowerCase().includes(currSearchText)) {\n                        filteredCountriesByRegion.push(currCountry);\n                    }\n                } \n                // if the search bar is empty, then we just need to check the region\n                else {\n                    if (currCountry.region.toLowerCase() === lowerCaseRegion) {\n                        filteredCountriesByRegion.push(currCountry);\n                    }\n                }\n\n            }\n            // if there is a previous search bar word that isn't a valid country,\n            // then we have to let the user know\n            if (filteredCountriesByRegion.length === 0) {\n                setError(\"Invalid search - Please try again\");\n                setIsLoaded(true);\n            } \n            // \n            else {\n                setAllCountries(filteredCountriesByRegion);\n                setError(\"\");\n                setIsLoaded(true);\n                setCurrRegion(selectedRegion);\n            }\n\n        } \n        // If the user selects all, then we just retrieve all the data again.\n        else {\n            // retrieveAllData();\n            setCurrRegion('');\n            let initialState = localStorage.getItem(\"rest_countries_initial_state\");\n            let actualInitialState = JSON.parse(initialState);\n            let filteredCountriesByRegion = [];\n            if (currSearchText !== '') {\n                for (let i = 0; i < actualInitialState.length; i++) {\n                    if (actualInitialState[i].name.toLowerCase().includes(currSearchText.toLowerCase())) {\n                        filteredCountriesByRegion.push(actualInitialState[i]);\n                    }\n                }\n                setAllCountries(filteredCountriesByRegion);\n                setError(\"\");\n            } else {\n                setAllCountries(actualInitialState);\n                setError(\"\");\n                setIsLoaded(true);\n            }\n            // window.location.reload();\n        }\n    }\n\n    /**\n     * The call back function that gets executed whenever\n     * a new character is being typed in the search bar \n     * @param searchVal the country we are searching for\n     */\n    const getCountriesBySearch = (searchVal) => {\n\n        // only if we have typed something do we execute the code\n        if (searchVal !== '') {\n            let lowerCaseSearchVal = searchVal.toLowerCase();\n            let initialState = localStorage.getItem(\"rest_countries_initial_state\");\n            let actualInitialState = JSON.parse(initialState);\n            const filteredCountries = [];\n            for (let i = 0; i < actualInitialState.length; i++) {\n                let currCountry = actualInitialState[i];\n                if (currRegion.toLowerCase() !== 'all' && currRegion !== '') {\n                    if (currCountry.region.toLowerCase() === currRegion.toLowerCase()) {\n                        if (currCountry.name.toLowerCase().includes(lowerCaseSearchVal)) {\n                            filteredCountries.push(currCountry);\n                        }\n                    }\n                } else if (currRegion.toLowerCase() === 'all' || currRegion === '') {\n                    if (currCountry.name.toLowerCase().includes(lowerCaseSearchVal)) {\n                        filteredCountries.push(currCountry);\n                    }\n                }\n            }\n            // If we haven't found any countries, then we need to \n            // let the user know.\n            if (filteredCountries.length === 0) {\n                setError(\"Invalid search. Please try again.\");\n                setIsLoaded(true);\n            } \n            // If we have found countries, then we set the error to be empty.\n            else {\n                setError(\"\");\n                setIsLoaded(true);\n                setAllCountries(filteredCountries);\n            }\n        } \n        // if there is nothing in the search bar, then we simply retrieve the countries\n        // from local storage\n        else {\n            let initialState = localStorage.getItem(\"rest_countries_initial_state\");\n            let actualInitialState = JSON.parse(initialState);\n            if (currRegion !== '') {\n                let filteredByCountries = [];\n                for (let i = 0; i < actualInitialState.length; i++) {\n                    if (actualInitialState[i].region.toLowerCase() === currRegion.toLowerCase()) {\n                        filteredByCountries.push(actualInitialState[i]);\n                    }\n                }\n                setAllCountries(filteredByCountries);\n            } else {\n                setAllCountries(actualInitialState);\n            }\n        }\n    }\n  \n    /**\n     * If we have an error we need to let the user know\n     */\n    if (error !== \"\") {\n        return (\n            <div className=\"global\">\n\n                <div class=\"flex flex-row justify-between flex-wrap search_bar_and_filter\">\n\n                \n                    <div class=\"flex justify-between search_bar\">\n                        <form onSubmit={(e) => e.preventDefault()}>\n                            <div class=\"relative\">\n                                <span class=\"absolute inset-y-0 left-0 flex items-center pl-2\">\n                                        <i class=\"fal fa-search\"></i>\n                                        </span>\n                            </div>\n                            <input placeholder='Search for a country...' onChange={(e) => {\n                                            const val = document.getElementById(\"actual_search_bar\").value;\n                                            setCurrSearchText(val);\n                                            getCountriesBySearch(val);\n                                        }} name=\"search\" type=\"text\" id=\"actual_search_bar\" value={currSearchText} class=\"h-10 w-96 rounded-md border-none search_bar_color pl-[30px]\">\n                            \n                            </input>\n                        </form>\n                        \n\n                    </div>\n\n                    <div class=\"flex\">\n                    {/* <Select className=\"region_filter\" options={region_options} value={region_options.value} onChange={(e) => {\n                                let selectedRegion = e.value;\n                                setCurrRegion(selectedRegion);\n                                getCountriesByRegion(selectedRegion);\n                            }} components={{\n                                IndicatorSeparator: () => null\n                                }} styles={{\n                                control: (baseStyles, state) => ({\n                                    ...baseStyles,\n                                    border:'none',\n                                    backgroundColor: state.isSelected ? \"hsl(209,23%,22%)\" : \"hsl(209,23%,22%)\",\n                                    textDecoration:state.isSelected ? \"white\" : \"black\",                               \n                                }),\n                                }} placeholder=\"Filter by Region\" ref={selectRegionRef}/> */}\n                    </div>\n                </div>\n                \n\n                 </div>\n\n        )\n    } \n    /**\n     * skeleton loading - need to let the user know that the data is\n     * on its way, so the user isn't left sitting with an empty screen\n     * wondering what is going on.\n     */\n    else if (!isLoaded) {\n        return <div className=\"loading_msg text-9xl flex justify-center  place-items-center\"><center>Loading...</center></div>\n    } \n    /**\n     * If everything works correctly, then we load the countries.\n     */\n    else {\n        return (\n            <>\n            <div className=\"global flex flex-col\">\n\n                <div class=\"flex flex-row justify-between search_bar_and_filter flex-wrap\">\n                    <div class=\"search_bar sm:mr-[30%] z-1\">\n                        <form onSubmit={(e) => e.preventDefault()}>\n                            <div class=\"relative z-1\">\n                                <span class=\"absolute inset-y-0 left-0 flex items-center pl-2\">\n                                            <i class=\"fal mt-12\"><FaSearch/></i>\n                                            </span>\n\n                            </div>\n                            <input placeholder='Search for a country...' onChange={(e) => {\n                                            const val = document.getElementById(\"actual_search_bar\").value;\n                                            setCurrSearchText(val);\n                                            getCountriesBySearch(val);\n                                        }} name=\"search\" type=\"text\" id=\"actual_search_bar\" value={currSearchText} class=\"h-12 w-full rounded-md border-none search_bar_color pl-[30px]\">\n                            \n                            </input>\n                        </form>\n                        \n\n                    </div>\n\n                    <div class=\"z-1 region_filter\">\n                    <Select className=\"region_filter\" options={region_options} value={region_options.value} onChange={(e) => {\n                                let selectedRegion = e.value;\n                                setCurrRegion(selectedRegion);\n                                getCountriesByRegion(selectedRegion);\n                            }} components={{\n                                IndicatorSeparator: () => null\n                                }} styles={{\n                                control: (baseStyles, state) => ({\n                                    ...baseStyles,\n                                    border:'none',\n                                    backgroundColor: state.isSelected ? \"hsl(209,23%,22%)\" : \"hsl(209,23%,22%)\",\n                                    textDecoration:state.isSelected ? \"white\" : \"black\",                               \n                                }),\n                                }} placeholder=\"Filter by Region\" ref={selectRegionRef}/>\n                        \n\n                        \n                    </div>\n                </div>\n                {/* <div class=\"flex items-center justify-center max-w-full\"> */}\n\n                    \n                    <div class=\"grid grid-cols-1 md:grid-cols-3 sm:grid-cols-2 lg:grid-cols-4 gap-16 mt-5\"> \n                        {allCountries.map((each, idx) => (\n                                <Link to={`/specificCountry/${each.name}`} style={{textDecoration:'none', color:'white'}}>\n                                    <div class=\"overflow-hidden rounded shadow-md h-full cursor-pointer hover:scale-105 hover:z-1 duration-300 mb-8 \n                                    card_body \">\n                                        <img src={each.flags.png} alt=\"country_image\" class=\"w-full h-32 object-cover\"/>\n                                        <div className='pl-4 flex flex-col'>\n                                            <h5 class=\"font-bold mt-4 card_title\">{each.name}</h5>\n                                            <span class=\"block actual_population\">Population: {each.population.toLocaleString()}</span>\n                                            <span class=\"block actual_region\">Region: {each.region}</span> \n                                            <span class=\"block actual_capital\">Capital: {each.capital}</span>\n                                        </div>\n\n                                    </div>\n                                </Link>\n                                    \n                            \n                        ))}\n                        </div>\n                    {/* </div> */}\n                \n\n                 </div>\n            </>\n        )\n    }\n}\n\nexport default Countries;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}