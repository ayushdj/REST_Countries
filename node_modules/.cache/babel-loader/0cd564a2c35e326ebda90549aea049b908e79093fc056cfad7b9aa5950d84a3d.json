{"ast":null,"code":"var _jsxFileName = \"/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/components/countries/countries.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './countries.css';\nimport { useState, useEffect } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\n/**\n * Represents all the countries - makes an API call to the countries API\n * upon loading the page\n * \n * @returns the Countries object\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Countries = () => {\n  _s();\n  /*\n      States:\n          allCountries: the local representation of the countries\n          isLoaded: a boolean flag that gets set to false once the\n                    countries have loaded\n          setError: if there is an error, this will show to the screen\n  */\n  const [allCountries, setAllCountries] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(null);\n\n  /*\n      gets called upon loading the page\n  */\n  useEffect(() => {\n    fetch(`https://restcountries.com/v2/all`).then(response => response.json()).then(json => {\n      setIsLoaded(true);\n      setAllCountries(json);\n    }).catch(err => {\n      setIsLoaded(true);\n      setError(err);\n    });\n  }, []);\n\n  /**\n   * If we have an error we need to let the user know\n   */\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 16\n    }, this);\n  }\n  /**\n   * skeleton loading - need to let the user know that the data is\n   * on its way, so the user isn't left sitting with an empty screen\n   * wondering what is going on.\n   */else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container countries_header\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 16\n    }, this);\n  }\n  /**\n   * If everything works correctly, then we load the countries.\n   */else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container countries_header\",\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          className: \"g-4\",\n          children: Array.from({\n            length: 4\n          }).map((each, idx) => /*#__PURE__*/_jsxDEV(Card, {\n            style: {\n              width: '18rem',\n              cursor: 'pointer'\n            },\n            onClick: () => console.log(\"CLICKED \" + each.name),\n            children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n              variant: \"top\",\n              src: each.flags.png\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                className: \"card_title\",\n                children: each.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 29\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 89\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                className: \"card_text\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"card_stats\",\n                  children: \"Population: \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 33\n                }, this), each.population.toLocaleString(), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 116\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"card_stats\",\n                  children: \"Region: \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 33\n                }, this), each.region, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 91\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"card_stats\",\n                  children: \"Capital: \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 33\n                }, this), each.capital]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n};\n_s(Countries, \"eZOEI1k7eO5OrLAvwfRWjDBTGHI=\");\n_c = Countries;\nexport default Countries;\nvar _c;\n$RefreshReg$(_c, \"Countries\");","map":{"version":3,"names":["React","useState","useEffect","Card","Col","Row","Countries","allCountries","setAllCountries","isLoaded","setIsLoaded","error","setError","fetch","then","response","json","catch","err","message","Array","from","length","map","each","idx","width","cursor","console","log","name","flags","png","population","toLocaleString","region","capital"],"sources":["/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/components/countries/countries.jsx"],"sourcesContent":["import React from 'react';\nimport './countries.css';\nimport {useState, useEffect} from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\n\n/**\n * Represents all the countries - makes an API call to the countries API\n * upon loading the page\n * \n * @returns the Countries object\n */\nconst Countries = () => {\n\n    /*\n        States:\n            allCountries: the local representation of the countries\n            isLoaded: a boolean flag that gets set to false once the\n                      countries have loaded\n            setError: if there is an error, this will show to the screen\n    */\n    const [allCountries, setAllCountries] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [error, setError] = useState(null);\n\n    /*\n        gets called upon loading the page\n    */\n    useEffect(() => {\n        fetch(`https://restcountries.com/v2/all`).\n            then(response=> response.json()).then((json) => {\n                setIsLoaded(true);\n                setAllCountries(json);\n            }).catch(err => {\n                setIsLoaded(true);\n                setError(err);\n            })\n    },[]);\n\n  \n    /**\n     * If we have an error we need to let the user know\n     */\n    if (error) {\n        return <div>Error: {error.message}</div>\n    } \n    /**\n     * skeleton loading - need to let the user know that the data is\n     * on its way, so the user isn't left sitting with an empty screen\n     * wondering what is going on.\n     */\n    else if (!isLoaded) {\n        return <div className=\"container countries_header\">Loading...</div>\n    } \n    /**\n     * If everything works correctly, then we load the countries.\n     */\n    else {\n        return (\n            <>\n                <div className=\"container countries_header\">\n                <Row className=\"g-4\"> \n                    {Array.from({length: 4}).map((each, idx) => (\n                        <Card style={{ width: '18rem', cursor: 'pointer' }} onClick={() => console.log(\"CLICKED \" + each.name)}>\n                        <Card.Img variant=\"top\" src={each.flags.png} />\n                        <Card.Body>\n                            <Card.Title className=\"card_title\">{each.name}</Card.Title> <br/>\n                            <Card.Text className=\"card_text\">\n                                <span className='card_stats'>Population: </span>{each.population.toLocaleString()} <br/>\n                                <span className='card_stats'>Region: </span>{each.region} <br/>\n                                <span className='card_stats'>Capital: </span>{each.capital}\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n                        \n                    ))\n                    \n                    }\n                \n                </Row>\n                    \n                        {/* {allCountries.map((each) =>\n                            \n                            <Card style={{ width: '18rem', cursor: 'pointer' }} onClick={() => console.log(\"CLICKED \" + each.name)}>\n                                <Card.Img variant=\"top\" src={each.flags.png} />\n                                <Card.Body>\n                                    <Card.Title className=\"card_title\">{each.name}</Card.Title> <br/>\n                                    <Card.Text className=\"card_text\">\n                                        <span className='card_stats'>Population: </span>{each.population.toLocaleString()} <br/>\n                                        <span className='card_stats'>Region: </span>{each.region} <br/>\n                                        <span className='card_stats'>Capital: </span>{each.capital}\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n                            \n                        )} */}\n                    \n                </div>\n            </>\n        )\n    }\n}\n\nexport default Countries;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}