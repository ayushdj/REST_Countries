{"ast":null,"code":"var _jsxFileName = \"/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/components/countries/countries.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './countries.css';\nimport { useState, useEffect } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\n/**\n * Represents all the countries - makes an API call to the countries API\n * upon loading the page\n * \n * @returns the Countries object\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Countries = () => {\n  _s();\n  /*\n      States:\n          allCountries: the local representation of the countries\n          isLoaded: a boolean flag that gets set to false once the\n                    countries have loaded\n          setError: if there is an error, this will show to the screen\n  */\n  const [allCountries, setAllCountries] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(null);\n\n  /*\n      gets called upon loading the page\n  */\n  useEffect(() => {\n    fetch(`https://restcountries.com/v2/all`).then(response => response.json()).then(json => {\n      setIsLoaded(true);\n      setAllCountries(json);\n    }).catch(err => {\n      setIsLoaded(true);\n      setError(err);\n    });\n  }, []);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 16\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container countries_header\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 16\n    }, this);\n  }\n  /**\n   * If everything works correctly, then we load the countries.\n   */else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container countries_header\",\n        children: allCountries.map(each => /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            width: '18rem'\n          },\n          onClick: () => console.log(\"CLICKED \" + each.name),\n          children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n            variant: \"top\",\n            src: each.flags.png\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n              className: \"card_title\",\n              children: each.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              className: \"card_text\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"population: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 45\n              }, this), each.population.toLocalString(), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 104\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"region: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 45\n              }, this), each.region, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 80\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"capital: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 45\n              }, this), each.capital]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n};\n_s(Countries, \"eZOEI1k7eO5OrLAvwfRWjDBTGHI=\");\n_c = Countries;\nexport default Countries;\nvar _c;\n$RefreshReg$(_c, \"Countries\");","map":{"version":3,"names":["React","useState","useEffect","Button","Card","Countries","allCountries","setAllCountries","isLoaded","setIsLoaded","error","setError","fetch","then","response","json","catch","err","message","map","each","width","console","log","name","flags","png","population","toLocalString","region","capital"],"sources":["/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/components/countries/countries.jsx"],"sourcesContent":["import React from 'react';\nimport './countries.css';\nimport {useState, useEffect} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\n\n\n/**\n * Represents all the countries - makes an API call to the countries API\n * upon loading the page\n * \n * @returns the Countries object\n */\nconst Countries = () => {\n\n    /*\n        States:\n            allCountries: the local representation of the countries\n            isLoaded: a boolean flag that gets set to false once the\n                      countries have loaded\n            setError: if there is an error, this will show to the screen\n    */\n    const [allCountries, setAllCountries] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [error, setError] = useState(null);\n\n    /*\n        gets called upon loading the page\n    */\n    useEffect(() => {\n        fetch(`https://restcountries.com/v2/all`).\n            then(response=> response.json()).then((json) => {\n                setIsLoaded(true);\n                setAllCountries(json);\n            }).catch(err => {\n                setIsLoaded(true);\n                setError(err);\n            })\n    },[]);\n\n  \n    if (error) {\n        return <div>Error: {error.message}</div>\n    } else if (!isLoaded) {\n        return <div className=\"container countries_header\">Loading...</div>\n    } \n    /**\n     * If everything works correctly, then we load the countries.\n     */\n    else {\n        return (\n            <>\n                <div className=\"container countries_header\">\n                    \n                        {allCountries.map((each) =>\n                            \n                                <Card style={{ width: '18rem' }} onClick={() => console.log(\"CLICKED \" + each.name)}>\n                                    <Card.Img variant=\"top\" src={each.flags.png} />\n                                    <Card.Body>\n                                        <Card.Title className=\"card_title\">{each.name}</Card.Title>\n                                        <Card.Text className=\"card_text\">\n                                            <span>population: </span>{each.population.toLocalString()} <br/>\n                                            <span>region: </span>{each.region} <br/>\n                                            <span>capital: </span>{each.capital}\n                                        </Card.Text>\n                                    </Card.Body>\n                                </Card>\n                            \n                        )}\n                    \n                </div>\n            </>\n        )\n    }\n}\n\nexport default Countries;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}