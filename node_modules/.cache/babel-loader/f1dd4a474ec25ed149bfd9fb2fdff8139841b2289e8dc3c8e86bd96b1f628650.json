{"ast":null,"code":"import base_url from\"../util/baseUrl\";/**\n * Gets all country information\n * @returns a Promise\n */var getAllCountries=function getAllCountries(){return fetch(base_url+\"/all\",{method:'GET',headers:{Accept:'application/json'}});};/**\n * Gets information specific to one country\n * @param {*} countryName the name of the country\n * @returns a Promise\n */var getCountryByName=function getCountryByName(countryName){return fetch(base_url+\"/name/\".concat(countryName,\"/?fullText=true\"),{method:'GET',headers:{Accept:'application/json'}});};/**\n * Gets all the countries for a set of country codes\n * @param {*} countryCodes the joined comma separated string with all the country codes\n * @returns a Promise\n */var getBorderInformation=function getBorderInformation(countryCodes){return fetch(\"https://restcountries.com/v2/alpha?codes=\".concat(countryCodes));};/**\n * We want to validate the response we get from all these API calls \n * @param {*} response the response object returned from fetch\n * @returns a string that we need to set for the error\n */var validateResponse=function validateResponse(response){if(response.status>=300&&response.status<=399){return response.status+\" Error: \"+response.statusText;}else if(response.status>=400&&response.status<=499){return response.status+\" Client Error: \"+response.statusText;}else if(response.status>=500&&response.status<=599){return response.status+\" Server Error: \"+response.statusText;}else if(response.status>=100&&response.status<=199){return response.status+\" Information Response: Processing Request\";}else{return'';}};var functions={getAllCountries:getAllCountries,getCountryByName:getCountryByName,getBorderInformation:getBorderInformation,validateResponse:validateResponse};export default functions;","map":{"version":3,"names":["base_url","getAllCountries","fetch","method","headers","Accept","getCountryByName","countryName","getBorderInformation","countryCodes","validateResponse","response","status","statusText","functions"],"sources":["/Users/ayushdhananjai/REST_Countries/src/api/api.js"],"sourcesContent":["import base_url from \"../util/baseUrl\";\n\n/**\n * Gets all country information\n * @returns a Promise\n */\nconst getAllCountries = () => fetch(base_url + `/all`, {\n    method: 'GET',\n    headers: {\n        Accept: 'application/json',\n    },\n});\n\n/**\n * Gets information specific to one country\n * @param {*} countryName the name of the country\n * @returns a Promise\n */\nconst getCountryByName = (countryName) => fetch(base_url + `/name/${countryName}/?fullText=true`, {\n    method: 'GET',\n    headers: {\n        Accept: 'application/json',\n    },\n})\n\n/**\n * Gets all the countries for a set of country codes\n * @param {*} countryCodes the joined comma separated string with all the country codes\n * @returns a Promise\n */\nconst getBorderInformation = (countryCodes) => fetch(`https://restcountries.com/v2/alpha?codes=${countryCodes}`);\n\n/**\n * We want to validate the response we get from all these API calls \n * @param {*} response the response object returned from fetch\n * @returns a string that we need to set for the error\n */\nconst validateResponse = (response) => {\n    if (response.status >= 300 && response.status <= 399) {\n        return response.status + \" Error: \" + response.statusText;\n    } else if (response.status >= 400 && response.status <= 499) {\n        return response.status + \" Client Error: \" + response.statusText;\n    } else if (response.status >= 500 && response.status <= 599) {\n        return response.status + \" Server Error: \" + response.statusText;\n    } else if (response.status >= 100 && response.status <= 199) {\n        return response.status + \" Information Response: Processing Request\";\n    } else {\n        return '';\n    }\n}\n\nconst functions = {getAllCountries, getCountryByName, getBorderInformation, validateResponse}\n\nexport default functions;"],"mappings":"AAAA,MAAOA,SAAQ,KAAM,iBAAiB,CAEtC;AACA;AACA;AACA,GACA,GAAMC,gBAAe,CAAG,QAAlBA,gBAAe,SAASC,MAAK,CAACF,QAAQ,OAAS,CAAE,CACnDG,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACLC,MAAM,CAAE,kBACZ,CACJ,CAAC,CAAC,GAEF;AACA;AACA;AACA;AACA,GACA,GAAMC,iBAAgB,CAAG,QAAnBA,iBAAgB,CAAIC,WAAW,QAAKL,MAAK,CAACF,QAAQ,iBAAYO,WAAW,mBAAiB,CAAE,CAC9FJ,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACLC,MAAM,CAAE,kBACZ,CACJ,CAAC,CAAC,GAEF;AACA;AACA;AACA;AACA,GACA,GAAMG,qBAAoB,CAAG,QAAvBA,qBAAoB,CAAIC,YAAY,QAAKP,MAAK,oDAA6CO,YAAY,EAAG,GAEhH;AACA;AACA;AACA;AACA,GACA,GAAMC,iBAAgB,CAAG,QAAnBA,iBAAgB,CAAIC,QAAQ,CAAK,CACnC,GAAIA,QAAQ,CAACC,MAAM,EAAI,GAAG,EAAID,QAAQ,CAACC,MAAM,EAAI,GAAG,CAAE,CAClD,MAAOD,SAAQ,CAACC,MAAM,CAAG,UAAU,CAAGD,QAAQ,CAACE,UAAU,CAC7D,CAAC,IAAM,IAAIF,QAAQ,CAACC,MAAM,EAAI,GAAG,EAAID,QAAQ,CAACC,MAAM,EAAI,GAAG,CAAE,CACzD,MAAOD,SAAQ,CAACC,MAAM,CAAG,iBAAiB,CAAGD,QAAQ,CAACE,UAAU,CACpE,CAAC,IAAM,IAAIF,QAAQ,CAACC,MAAM,EAAI,GAAG,EAAID,QAAQ,CAACC,MAAM,EAAI,GAAG,CAAE,CACzD,MAAOD,SAAQ,CAACC,MAAM,CAAG,iBAAiB,CAAGD,QAAQ,CAACE,UAAU,CACpE,CAAC,IAAM,IAAIF,QAAQ,CAACC,MAAM,EAAI,GAAG,EAAID,QAAQ,CAACC,MAAM,EAAI,GAAG,CAAE,CACzD,MAAOD,SAAQ,CAACC,MAAM,CAAG,2CAA2C,CACxE,CAAC,IAAM,CACH,MAAO,EAAE,CACb,CACJ,CAAC,CAED,GAAME,UAAS,CAAG,CAACb,eAAe,CAAfA,eAAe,CAAEK,gBAAgB,CAAhBA,gBAAgB,CAAEE,oBAAoB,CAApBA,oBAAoB,CAAEE,gBAAgB,CAAhBA,gBAAgB,CAAC,CAE7F,cAAeI,UAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}