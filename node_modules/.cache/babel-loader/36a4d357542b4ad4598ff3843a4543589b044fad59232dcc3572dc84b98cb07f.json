{"ast":null,"code":"var _jsxFileName = \"/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/components/countries/countries.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './countries.css';\nimport { useState, useEffect } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n// import Container from 'react-bootstrap/Container';\nimport { Link } from \"react-router-dom\";\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Select from 'react-select';\nimport Form from 'react-bootstrap/Form';\n\n/**\n * Represents all the countries - makes an API call to the countries API\n * upon loading the page\n * \n * @returns the Countries object\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Countries = () => {\n  _s();\n  /*\n      States:\n          allCountries: the local representation of the countries\n          isLoaded: a boolean flag that gets set to false once the\n                    countries have loaded\n          setError: if there is an error, this will show to the screen\n  */\n  const [allCountries, setAllCountries] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [searchText, setSearchText] = useState('');\n  const retrieveAllData = async () => {\n    // setIsLoaded(false);\n    const response = await fetch(`https://restcountries.com/v2/all`, {\n      //mode:'no-cors'\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n    if (!response.ok) {\n      setError(\"error msg\");\n    }\n    const countries = await response.json();\n    localStorage.setItem(\"rest_countries_initial_state\", JSON.stringify(countries));\n    setAllCountries(countries);\n    setIsLoaded(true);\n  };\n\n  /*\n      gets called upon loading the page\n  */\n  useEffect(() => {\n    retrieveAllData();\n  }, []);\n  const getCountriesByRegion = async selectedRegion => {\n    if (selectedRegion !== 'all') {\n      const response = await fetch(`https://restcountries.com/v2/region/${selectedRegion}`, {\n        method: 'GET',\n        headers: {\n          Accept: 'application/json'\n        }\n      });\n      if (!response.ok) {\n        setError(\"Uh oh! Something went wrong. Please try again\");\n        return;\n      }\n      const result = await response.json();\n      setAllCountries(result);\n      setError(\"\");\n      setIsLoaded(true);\n    } else {\n      retrieveAllData();\n    }\n  };\n  const getCountriesBySearch = searchVal => {\n    if (searchVal !== '') {\n      // const response = await fetch(`https://restcountries.com/v2/name/${searchVal}`,{\n      // method: 'GET',\n      // headers: {\n      //     Accept: 'application/json',\n      // },});\n      // if (!response.ok) {\n      //     setError(\"Invalid country. Please try again\");\n      //     return;\n      // }\n      // const result = await response.json();\n      // setAllCountries(result);\n      // setError(\"\");\n      // setIsLoaded(true);\n      var actualSearchVal = searchVal.toLowerCase();\n      let initialState = localStorage.getItem(\"rest_countries_initial_state\");\n      let actualInitialState = JSON.parse(initialState);\n      const arr = [];\n      //console.log(typeof(arr));\n      console.log(actualInitialState);\n      const filtered = [];\n      for (let i = 0; i < actualInitialState.length; i++) {\n        let curr = actualInitialState[i];\n        if (curr.name.toLowerCase().includes(actualSearchVal)) {\n          filtered.push(curr);\n        }\n      }\n      // console.log(filtered);\n      setAllCountries(filtered);\n      if (allCountries.length === 0) {\n        setError(\"Invalid country. Please try again\");\n        setIsLoaded(true);\n      } else {\n        setError(\"\");\n        setIsLoaded(true);\n      }\n    } else {\n      let initialState = localStorage.getItem(\"rest_countries_initial_state\");\n      let actualInitialState = JSON.parse(initialState);\n      setAllCountries(actualInitialState);\n    }\n  };\n  const options = [{\n    value: 'africa',\n    label: 'Africa'\n  }, {\n    value: 'americas',\n    label: 'America'\n  }, {\n    value: 'asia',\n    label: 'Asia'\n  }, {\n    value: 'europe',\n    label: 'Europe'\n  }, {\n    value: 'oceania',\n    label: 'Oceania'\n  }, {\n    value: 'all',\n    label: 'All'\n  }];\n\n  /**\n   * If we have an error we need to let the user know\n   */\n  if (error !== \"\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search_bar_and_filter\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search_filter\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: e => e.preventDefault(),\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            value: searchText,\n            onChange: e => {\n              const val = document.getElementById(\"actual_search_bar\").value;\n              setSearchText(val);\n              getCountriesBySearch(val);\n            },\n            name: \"email\",\n            type: \"text\",\n            id: \"actual_search_bar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"region_filter\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => {\n            let selectedRegion = e.target.value;\n            getCountriesByRegion(selectedRegion);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            selected: true,\n            disabled: true,\n            children: \"Filter by Region\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"africa\",\n            children: \"Africa\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"americas\",\n            children: \"America\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"asia\",\n            children: \"Asia\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"europe\",\n            children: \"Europe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"oceania\",\n            children: \"Oceania\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"all\",\n            children: \"All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this);\n  }\n  /**\n   * skeleton loading - need to let the user know that the data is\n   * on its way, so the user isn't left sitting with an empty screen\n   * wondering what is going on.\n   */else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container loading_msg\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 16\n    }, this);\n  }\n  /**\n   * If everything works correctly, then we load the countries.\n   */else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search_bar_and_filter\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search_filter\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: e => e.preventDefault(),\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-control\",\n              value: searchText,\n              placeholder: \"Search for a country...\",\n              onChange: e => {\n                const val = document.getElementById(\"actual_search_bar\").value;\n                setSearchText(val);\n                getCountriesBySearch(val);\n              },\n              name: \"search\",\n              type: \"text\",\n              id: \"actual_search_bar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"region_filter\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            className: \"select_regions\",\n            options: options,\n            value: options.value,\n            onChange: e => {\n              let selectedRegion = e.value;\n              getCountriesByRegion(selectedRegion);\n            },\n            components: {\n              IndicatorSeparator: () => null\n            },\n            styles: {\n              control: (baseStyles, state) => ({\n                ...baseStyles,\n                border: 'none',\n                backgroundColor: state.isSelected ? \"hsl(209,23%,22%)\" : \"hsl(209,23%,22%)\",\n                textDecoration: state.isSelected ? \"white\" : \"black\",\n                colors: {\n                  text: 'orangered',\n                  primary25: 'hotpink',\n                  primary: 'black'\n                }\n              })\n            },\n            placeholder: \"Filter by Region\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countries_main_div\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"actual_all_countries_block\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"g-4\",\n            xs: 1,\n            sm: 2,\n            md: 2,\n            lg: 3,\n            xl: 4,\n            xxl: 4,\n            children: allCountries.map((each, idx) => /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"parent_card\",\n                children: /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/specificCountry/${each.name}`,\n                  style: {\n                    textDecoration: 'none'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    className: \"country_card border-0 mt-2 mr-4 d-flex h-100\",\n                    children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n                      variant: \"top\",\n                      src: each.flags.png,\n                      className: \"card_image\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 251,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n                      className: \"card_body\",\n                      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                        className: \"card_title\",\n                        children: /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: each.name\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 254,\n                          columnNumber: 88\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 254,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                        className: \"card_text\",\n                        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"card_stats\",\n                          children: \"Population: \"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 256,\n                          columnNumber: 57\n                        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"actual_population\",\n                          children: each.population.toLocaleString()\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 256,\n                          columnNumber: 106\n                        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 256,\n                          columnNumber: 184\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"card_stats\",\n                          children: \"Region: \"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 257,\n                          columnNumber: 57\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"actual_region\",\n                          children: [each.region, \" \"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 257,\n                          columnNumber: 101\n                        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 257,\n                          columnNumber: 154\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"card_stats\",\n                          children: \"Capital: \"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 258,\n                          columnNumber: 57\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"actual_capital\",\n                          children: [\" \", each.capital]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 258,\n                          columnNumber: 102\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 255,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 253,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 250,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 249,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n};\n_s(Countries, \"Ogg2TChIjuK/mj851P8y4+4OHLs=\");\n_c = Countries;\nexport default Countries;\nvar _c;\n$RefreshReg$(_c, \"Countries\");","map":{"version":3,"names":["React","useState","useEffect","Card","Col","Row","Link","Dropdown","DropdownButton","Select","Form","Countries","allCountries","setAllCountries","isLoaded","setIsLoaded","error","setError","searchText","setSearchText","retrieveAllData","response","fetch","method","headers","Accept","ok","countries","json","localStorage","setItem","JSON","stringify","getCountriesByRegion","selectedRegion","result","getCountriesBySearch","searchVal","actualSearchVal","toLowerCase","initialState","getItem","actualInitialState","parse","arr","console","log","filtered","i","length","curr","name","includes","push","options","value","label","e","preventDefault","val","document","getElementById","target","IndicatorSeparator","control","baseStyles","state","border","backgroundColor","isSelected","textDecoration","colors","text","primary25","primary","map","each","idx","flags","png","population","toLocaleString","region","capital"],"sources":["/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/components/countries/countries.jsx"],"sourcesContent":["import React from 'react';\nimport './countries.css';\nimport {useState, useEffect} from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n// import Container from 'react-bootstrap/Container';\nimport { Link } from \"react-router-dom\";\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Select from 'react-select';\nimport Form from 'react-bootstrap/Form';\n\n\n\n\n/**\n * Represents all the countries - makes an API call to the countries API\n * upon loading the page\n * \n * @returns the Countries object\n */\nconst Countries = () => {\n\n    /*\n        States:\n            allCountries: the local representation of the countries\n            isLoaded: a boolean flag that gets set to false once the\n                      countries have loaded\n            setError: if there is an error, this will show to the screen\n    */\n    const [allCountries, setAllCountries] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [error, setError] = useState(\"\");\n    const [searchText, setSearchText] = useState('');\n\n\n    const retrieveAllData = async () => {\n        // setIsLoaded(false);\n        const response = await fetch(`https://restcountries.com/v2/all`, {\n                //mode:'no-cors'\n                method: 'GET',\n                headers: {\n                    Accept: 'application/json',\n                },\n             });\n        if (!response.ok) {\n            setError(\"error msg\");\n        }\n        const countries = await response.json();\n        localStorage.setItem(\"rest_countries_initial_state\", JSON.stringify(countries));\n        setAllCountries(countries);\n        setIsLoaded(true);\n    }\n\n\n    /*\n        gets called upon loading the page\n    */\n    useEffect(() => {\n        retrieveAllData();\n    },[]);\n\n    \n    const getCountriesByRegion = async (selectedRegion) => {\n        if (selectedRegion !=='all') {\n            const response = await fetch(`https://restcountries.com/v2/region/${selectedRegion}`,{\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n            },\n        });\n            if (!response.ok) {\n                setError(\"Uh oh! Something went wrong. Please try again\");\n                return\n            }\n            const result = await response.json();\n            setAllCountries(result);\n            setError(\"\");\n            setIsLoaded(true);\n        } else {\n            retrieveAllData();\n        }\n    }\n\n    const getCountriesBySearch = (searchVal) => {\n\n        if (searchVal !== '') {\n            // const response = await fetch(`https://restcountries.com/v2/name/${searchVal}`,{\n            // method: 'GET',\n            // headers: {\n            //     Accept: 'application/json',\n            // },});\n            // if (!response.ok) {\n            //     setError(\"Invalid country. Please try again\");\n            //     return;\n            // }\n            // const result = await response.json();\n            // setAllCountries(result);\n            // setError(\"\");\n            // setIsLoaded(true);\n            var actualSearchVal = searchVal.toLowerCase();\n            let initialState = localStorage.getItem(\"rest_countries_initial_state\");\n            let actualInitialState = JSON.parse(initialState);\n            const arr = [];\n            //console.log(typeof(arr));\n            console.log(actualInitialState);\n            const filtered = [];\n            for (let i = 0; i < actualInitialState.length; i++) {\n                let curr = actualInitialState[i];\n                if (curr.name.toLowerCase().includes(actualSearchVal)) {\n                    filtered.push(curr);\n                }\n            }\n            // console.log(filtered);\n            setAllCountries(filtered);\n            if (allCountries.length === 0) {\n                setError(\"Invalid country. Please try again\");\n                setIsLoaded(true);\n            } else {\n                setError(\"\");\n                setIsLoaded(true);\n            }\n            \n        } else {\n            let initialState = localStorage.getItem(\"rest_countries_initial_state\");\n            let actualInitialState = JSON.parse(initialState);\n            setAllCountries(actualInitialState);\n        }\n    }\n\n    const options = [\n        { value: 'africa', label: 'Africa' },\n        { value: 'americas', label: 'America' },\n        { value: 'asia', label: 'Asia' },\n        { value: 'europe', label: 'Europe' },\n        { value: 'oceania', label: 'Oceania' },\n        { value: 'all', label: 'All'}\n      ]\n\n  \n    /**\n     * If we have an error we need to let the user know\n     */\n    if (error !== \"\") {\n        return (\n            <div className='search_bar_and_filter'>\n                <div className='search_filter'>\n                    <form onSubmit={(e) => e.preventDefault()}>\n                        <input className=\"form-control\" value={searchText} onChange={(e) => {\n                            const val = document.getElementById(\"actual_search_bar\").value;\n                            setSearchText(val);\n                            getCountriesBySearch(val);\n                        }} name=\"email\" type=\"text\" id=\"actual_search_bar\"/>\n                    \n                    </form>\n                </div>\n                \n                <div className=\"region_filter\">\n                    <select onChange={(e) => {\n                        let selectedRegion = e.target.value;\n                        getCountriesByRegion(selectedRegion);\n                    }}>\n                        <option selected disabled>Filter by Region</option>\n                        <option value=\"africa\">Africa</option>\n                        <option value=\"americas\">America</option>\n                        <option value=\"asia\">Asia</option>\n                        <option value=\"europe\">Europe</option>\n                        <option value=\"oceania\">Oceania</option>\n                        <option value=\"all\">All</option>\n                    </select>\n                </div>\n\n                {error}\n            </div>\n        )\n    } \n    /**\n     * skeleton loading - need to let the user know that the data is\n     * on its way, so the user isn't left sitting with an empty screen\n     * wondering what is going on.\n     */\n    else if (!isLoaded) {\n        return <div className=\"container loading_msg\">Loading...</div>\n    } \n    /**\n     * If everything works correctly, then we load the countries.\n     */\n    else {\n        return (\n            <>\n                <div className=\"search_bar_and_filter\">\n                    <div className=\"search_filter\">\n                        <form onSubmit={(e) => e.preventDefault()}>\n                            {/* <div class=\"input_icons\"> */}\n                                {/* <i class=\"fa fa-envelope icon\"></i> */}\n                                <input className=\"form-control\" value={searchText} placeholder=\"Search for a country...\" onChange={(e) => {\n                                    const val = document.getElementById(\"actual_search_bar\").value;\n                                    setSearchText(val);\n                                    getCountriesBySearch(val);\n                                }} name=\"search\" type=\"text\" id=\"actual_search_bar\"/>\n                            {/* </div> */}\n                        </form>\n                    </div>\n\n                    <div className=\"region_filter\">\n                        <Select className=\"select_regions\" options={options} value={options.value} onChange={(e) => {\n                            let selectedRegion = e.value;\n                            getCountriesByRegion(selectedRegion);\n                        }} components={{\n                            IndicatorSeparator: () => null\n                            }} styles={{\n                            control: (baseStyles, state) => ({\n                                ...baseStyles,\n                                border:'none',\n                                backgroundColor: state.isSelected ? \"hsl(209,23%,22%)\" : \"hsl(209,23%,22%)\",\n                                textDecoration:state.isSelected ? \"white\" : \"black\",\n                                colors: {\n                                \n                                  text: 'orangered',\n                                  primary25: 'hotpink',\n                                  primary: 'black',\n                                },\n                               \n                            }),\n                            }} placeholder=\"Filter by Region\" />\n{/* \n                        <select className=\"\" onChange={(e) => {\n                            let selectedRegion = e.target.value;\n                            getCountriesByRegion(selectedRegion);\n                        }}>\n                            <option selected disabled>Filter by Region</option>\n                            <option value=\"africa\">Africa</option>\n                            <option value=\"americas\">America</option>\n                            <option value=\"asia\">Asia</option>\n                            <option value=\"europe\">Europe</option>\n                            <option value=\"oceania\">Oceania</option>\n                            <option value=\"all\">All</option>\n                        </select> */}\n                    </div>\n                </div>\n                \n                <div className=\"countries_main_div\">\n                    <div className=\"actual_all_countries_block\">\n                        <Row className=\"g-4\" xs={1} sm={2} md={2} lg={3} xl={4} xxl={4}> \n                            {allCountries.map((each, idx) => (\n                                <Col>\n                                    <div className='parent_card'>\n                                        <Link to={`/specificCountry/${each.name}`} style={{textDecoration:'none'}}>\n                                            <Card  className = \"country_card border-0 mt-2 mr-4 d-flex h-100\">\n                                                <Card.Img variant=\"top\" src={each.flags.png} className=\"card_image\"/>\n                                                \n                                                <Card.Body className=\"card_body\">\n                                                    <Card.Title className=\"card_title\"><div>{each.name}</div></Card.Title>\n                                                    <Card.Text className=\"card_text\">\n                                                        <span className='card_stats'>Population: </span> <span className=\"actual_population\">{each.population.toLocaleString()}</span> <br/>\n                                                        <span className='card_stats'>Region: </span><span className=\"actual_region\">{each.region} </span><br/>\n                                                        <span className='card_stats'>Capital: </span><span className=\"actual_capital\"> {each.capital}</span>\n                                                    </Card.Text>\n                                                </Card.Body>\n                                            </Card>\n                                        </Link>\n                                    </div>\n                                    \n                                </Col>  \n                                \n                            ))}\n                        </Row>\n                    </div>\n                    \n                </div>\n            </>\n        )\n    }\n}\n\nexport default Countries;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}