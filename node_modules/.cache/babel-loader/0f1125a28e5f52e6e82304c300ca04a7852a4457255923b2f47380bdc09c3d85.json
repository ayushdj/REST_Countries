{"ast":null,"code":"var _jsxFileName = \"/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/components/countries/countries.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './countries.css';\nimport { useState, useEffect } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { Link } from \"react-router-dom\";\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\n\n/**\n * Represents all the countries - makes an API call to the countries API\n * upon loading the page\n * \n * @returns the Countries object\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Countries = () => {\n  _s();\n  /*\n      States:\n          allCountries: the local representation of the countries\n          isLoaded: a boolean flag that gets set to false once the\n                    countries have loaded\n          setError: if there is an error, this will show to the screen\n  */\n  const [allCountries, setAllCountries] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(null);\n\n  /*\n      gets called upon loading the page\n  */\n  useEffect(() => {\n    fetch(`https://restcountries.com/v2/all`).then(response => response.json()).then(json => {\n      setIsLoaded(true);\n      setAllCountries(json);\n    }).catch(err => {\n      setIsLoaded(true);\n      setError(err);\n    });\n  }, []);\n\n  /**\n   * If we have an error we need to let the user know\n   */\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 16\n    }, this);\n  }\n  /**\n   * skeleton loading - need to let the user know that the data is\n   * on its way, so the user isn't left sitting with an empty screen\n   * wondering what is going on.\n   */else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container countries_header\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 16\n    }, this);\n  }\n  /**\n   * If everything works correctly, then we load the countries.\n   */else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchBar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter\",\n        children: /*#__PURE__*/_jsxDEV(DropdownButton, {\n          id: \"dropdown-basic-button\",\n          title: \"Filter by Region\",\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            value: \"Africa\",\n            children: \"Africa\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            value: \"Americas\",\n            children: \"Americas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            value: \"Asia\",\n            children: \"Asia\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            value: \"Europe\",\n            children: \"Europe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n            value: \"Oceania\",\n            children: \"Oceania\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countries_main_div\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"actual_all_countries_block\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"g-4\",\n            xs: 1,\n            sm: 2,\n            md: 2,\n            lg: 3,\n            xl: 4,\n            xxl: 4,\n            children: allCountries.map((each, idx) => /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"parent_card\",\n                children: /*#__PURE__*/_jsxDEV(Link, {\n                  to: `/specificCountry/${each.name}`,\n                  style: {\n                    textDecoration: 'none'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(Card, {\n                    className: \"country_card border-0 mt-2 mr-4 d-flex h-100\",\n                    onClick: () => console.log(\"CLICKED \" + each.name),\n                    children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n                      variant: \"top\",\n                      src: each.flags.png,\n                      className: \"card_image\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 88,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n                      className: \"card_body\",\n                      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                        className: \"card_title\",\n                        children: /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: each.name\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 91,\n                          columnNumber: 88\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 91,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                        className: \"card_text\",\n                        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"card_stats\",\n                          children: \"Population: \"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 93,\n                          columnNumber: 57\n                        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"actual_population\",\n                          children: each.population.toLocaleString()\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 93,\n                          columnNumber: 106\n                        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 93,\n                          columnNumber: 184\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"card_stats\",\n                          children: \"Region: \"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 94,\n                          columnNumber: 57\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"actual_region\",\n                          children: [each.region, \" \"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 94,\n                          columnNumber: 101\n                        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 94,\n                          columnNumber: 154\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"card_stats\",\n                          children: \"Capital: \"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 95,\n                          columnNumber: 57\n                        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: \"actual_capital\",\n                          children: [\" \", each.capital]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 95,\n                          columnNumber: 102\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 92,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 90,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 87,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n};\n_s(Countries, \"eZOEI1k7eO5OrLAvwfRWjDBTGHI=\");\n_c = Countries;\nexport default Countries;\nvar _c;\n$RefreshReg$(_c, \"Countries\");","map":{"version":3,"names":["React","useState","useEffect","Card","Col","Row","Link","Dropdown","DropdownButton","Countries","allCountries","setAllCountries","isLoaded","setIsLoaded","error","setError","fetch","then","response","json","catch","err","message","map","each","idx","name","textDecoration","console","log","flags","png","population","toLocaleString","region","capital"],"sources":["/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/components/countries/countries.jsx"],"sourcesContent":["import React from 'react';\nimport './countries.css';\nimport {useState, useEffect} from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { Link } from \"react-router-dom\";\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\n\n\n/**\n * Represents all the countries - makes an API call to the countries API\n * upon loading the page\n * \n * @returns the Countries object\n */\nconst Countries = () => {\n\n    /*\n        States:\n            allCountries: the local representation of the countries\n            isLoaded: a boolean flag that gets set to false once the\n                      countries have loaded\n            setError: if there is an error, this will show to the screen\n    */\n    const [allCountries, setAllCountries] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [error, setError] = useState(null);\n\n    /*\n        gets called upon loading the page\n    */\n    useEffect(() => {\n        fetch(`https://restcountries.com/v2/all`).\n            then(response=> response.json()).then((json) => {\n                setIsLoaded(true);\n                setAllCountries(json);\n            }).catch(err => {\n                setIsLoaded(true);\n                setError(err);\n            })\n    },[]);\n\n  \n    /**\n     * If we have an error we need to let the user know\n     */\n    if (error) {\n        return <div>Error: {error.message}</div>\n    } \n    /**\n     * skeleton loading - need to let the user know that the data is\n     * on its way, so the user isn't left sitting with an empty screen\n     * wondering what is going on.\n     */\n    else if (!isLoaded) {\n        return <div className=\"container countries_header\">Loading...</div>\n    } \n    /**\n     * If everything works correctly, then we load the countries.\n     */\n    else {\n        return (\n            <>\n                <div className=\"searchBar\">\n\n                </div>\n                <div className=\"filter\">\n                <DropdownButton id=\"dropdown-basic-button\" title=\"Filter by Region\">\n                    <Dropdown.Item value=\"Africa\">Africa</Dropdown.Item>\n                    <Dropdown.Item value=\"Americas\">Americas</Dropdown.Item>\n                    <Dropdown.Item value=\"Asia\">Asia</Dropdown.Item>\n                    <Dropdown.Item value=\"Europe\">Europe</Dropdown.Item>\n                    <Dropdown.Item value=\"Oceania\">Oceania</Dropdown.Item>\n                </DropdownButton>\n\n                </div>\n                \n                <div className=\"countries_main_div\">\n                    <div className=\"actual_all_countries_block\">\n                        <Row className=\"g-4\" xs={1} sm={2} md={2} lg={3} xl={4} xxl={4}> \n                            {allCountries.map((each, idx) => (\n                                <Col>\n                                    <div className='parent_card'>\n                                        <Link to={`/specificCountry/${each.name}`} style={{textDecoration:'none'}}>\n                                            <Card  className = \"country_card border-0 mt-2 mr-4 d-flex h-100\" onClick={() => console.log(\"CLICKED \" + each.name)}>\n                                                <Card.Img variant=\"top\" src={each.flags.png} className=\"card_image\"/>\n                                                \n                                                <Card.Body className=\"card_body\">\n                                                    <Card.Title className=\"card_title\"><div>{each.name}</div></Card.Title>\n                                                    <Card.Text className=\"card_text\">\n                                                        <span className='card_stats'>Population: </span> <span className=\"actual_population\">{each.population.toLocaleString()}</span> <br/>\n                                                        <span className='card_stats'>Region: </span><span className=\"actual_region\">{each.region} </span><br/>\n                                                        <span className='card_stats'>Capital: </span><span className=\"actual_capital\"> {each.capital}</span>\n                                                    </Card.Text>\n                                                </Card.Body>\n                                            </Card>\n                                        </Link>\n                                    </div>\n                                    \n                                </Col>  \n                                \n                            ))}\n                        </Row>\n                    </div>\n                    \n                </div>\n            </>\n        )\n    }\n}\n\nexport default Countries;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,iBAAiB;AACxB,SAAQC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AACzC,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,GAAG,MAAM,qBAAqB;AACrC,OAAOC,GAAG,MAAM,qBAAqB;AACrC,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,cAAc,MAAM,gCAAgC;;AAG3D;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAMA,MAAMC,SAAS,GAAG,MAAM;EAAA;EAEpB;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAExC;AACJ;AACA;EACIC,SAAS,CAAC,MAAM;IACZc,KAAK,CAAE,kCAAiC,CAAC,CACrCC,IAAI,CAACC,QAAQ,IAAGA,QAAQ,CAACC,IAAI,EAAE,CAAC,CAACF,IAAI,CAAEE,IAAI,IAAK;MAC5CN,WAAW,CAAC,IAAI,CAAC;MACjBF,eAAe,CAACQ,IAAI,CAAC;IACzB,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAI;MACZR,WAAW,CAAC,IAAI,CAAC;MACjBE,QAAQ,CAACM,GAAG,CAAC;IACjB,CAAC,CAAC;EACV,CAAC,EAAC,EAAE,CAAC;;EAGL;AACJ;AACA;EACI,IAAIP,KAAK,EAAE;IACP,oBAAO;MAAA,WAAK,SAAO,EAACA,KAAK,CAACQ,OAAO;IAAA;MAAA;MAAA;MAAA;IAAA,QAAO;EAC5C;EACA;AACJ;AACA;AACA;AACA,KAJI,KAKK,IAAI,CAACV,QAAQ,EAAE;IAChB,oBAAO;MAAK,SAAS,EAAC,4BAA4B;MAAA,UAAC;IAAU;MAAA;MAAA;MAAA;IAAA,QAAM;EACvE;EACA;AACJ;AACA,KAFI,KAGK;IACD,oBACI;MAAA,wBACI;QAAK,SAAS,EAAC;MAAW;QAAA;QAAA;QAAA;MAAA,QAEpB,eACN;QAAK,SAAS,EAAC,QAAQ;QAAA,uBACvB,QAAC,cAAc;UAAC,EAAE,EAAC,uBAAuB;UAAC,KAAK,EAAC,kBAAkB;UAAA,wBAC/D,QAAC,QAAQ,CAAC,IAAI;YAAC,KAAK,EAAC,QAAQ;YAAA,UAAC;UAAM;YAAA;YAAA;YAAA;UAAA,QAAgB,eACpD,QAAC,QAAQ,CAAC,IAAI;YAAC,KAAK,EAAC,UAAU;YAAA,UAAC;UAAQ;YAAA;YAAA;YAAA;UAAA,QAAgB,eACxD,QAAC,QAAQ,CAAC,IAAI;YAAC,KAAK,EAAC,MAAM;YAAA,UAAC;UAAI;YAAA;YAAA;YAAA;UAAA,QAAgB,eAChD,QAAC,QAAQ,CAAC,IAAI;YAAC,KAAK,EAAC,QAAQ;YAAA,UAAC;UAAM;YAAA;YAAA;YAAA;UAAA,QAAgB,eACpD,QAAC,QAAQ,CAAC,IAAI;YAAC,KAAK,EAAC,SAAS;YAAA,UAAC;UAAO;YAAA;YAAA;YAAA;UAAA,QAAgB;QAAA;UAAA;UAAA;UAAA;QAAA;MACzC;QAAA;QAAA;QAAA;MAAA,QAEX,eAEN;QAAK,SAAS,EAAC,oBAAoB;QAAA,uBAC/B;UAAK,SAAS,EAAC,4BAA4B;UAAA,uBACvC,QAAC,GAAG;YAAC,SAAS,EAAC,KAAK;YAAC,EAAE,EAAE,CAAE;YAAC,EAAE,EAAE,CAAE;YAAC,EAAE,EAAE,CAAE;YAAC,EAAE,EAAE,CAAE;YAAC,EAAE,EAAE,CAAE;YAAC,GAAG,EAAE,CAAE;YAAA,UAC1DF,YAAY,CAACa,GAAG,CAAC,CAACC,IAAI,EAAEC,GAAG,kBACxB,QAAC,GAAG;cAAA,uBACA;gBAAK,SAAS,EAAC,aAAa;gBAAA,uBACxB,QAAC,IAAI;kBAAC,EAAE,EAAG,oBAAmBD,IAAI,CAACE,IAAK,EAAE;kBAAC,KAAK,EAAE;oBAACC,cAAc,EAAC;kBAAM,CAAE;kBAAA,uBACtE,QAAC,IAAI;oBAAE,SAAS,EAAG,8CAA8C;oBAAC,OAAO,EAAE,MAAMC,OAAO,CAACC,GAAG,CAAC,UAAU,GAAGL,IAAI,CAACE,IAAI,CAAE;oBAAA,wBACjH,QAAC,IAAI,CAAC,GAAG;sBAAC,OAAO,EAAC,KAAK;sBAAC,GAAG,EAAEF,IAAI,CAACM,KAAK,CAACC,GAAI;sBAAC,SAAS,EAAC;oBAAY;sBAAA;sBAAA;sBAAA;oBAAA,QAAE,eAErE,QAAC,IAAI,CAAC,IAAI;sBAAC,SAAS,EAAC,WAAW;sBAAA,wBAC5B,QAAC,IAAI,CAAC,KAAK;wBAAC,SAAS,EAAC,YAAY;wBAAA,uBAAC;0BAAA,UAAMP,IAAI,CAACE;wBAAI;0BAAA;0BAAA;0BAAA;wBAAA;sBAAO;wBAAA;wBAAA;wBAAA;sBAAA,QAAa,eACtE,QAAC,IAAI,CAAC,IAAI;wBAAC,SAAS,EAAC,WAAW;wBAAA,wBAC5B;0BAAM,SAAS,EAAC,YAAY;0BAAA,UAAC;wBAAY;0BAAA;0BAAA;0BAAA;wBAAA,QAAO,KAAC;0BAAM,SAAS,EAAC,mBAAmB;0BAAA,UAAEF,IAAI,CAACQ,UAAU,CAACC,cAAc;wBAAE;0BAAA;0BAAA;0BAAA;wBAAA,QAAQ,KAAC;0BAAA;0BAAA;0BAAA;wBAAA,QAAK,eACpI;0BAAM,SAAS,EAAC,YAAY;0BAAA,UAAC;wBAAQ;0BAAA;0BAAA;0BAAA;wBAAA,QAAO;0BAAM,SAAS,EAAC,eAAe;0BAAA,WAAET,IAAI,CAACU,MAAM,EAAC,GAAC;wBAAA;0BAAA;0BAAA;0BAAA;wBAAA,QAAO;0BAAA;0BAAA;0BAAA;wBAAA,QAAK,eACtG;0BAAM,SAAS,EAAC,YAAY;0BAAA,UAAC;wBAAS;0BAAA;0BAAA;0BAAA;wBAAA,QAAO;0BAAM,SAAS,EAAC,gBAAgB;0BAAA,WAAC,GAAC,EAACV,IAAI,CAACW,OAAO;wBAAA;0BAAA;0BAAA;0BAAA;wBAAA,QAAQ;sBAAA;wBAAA;wBAAA;wBAAA;sBAAA,QAC5F;oBAAA;sBAAA;sBAAA;sBAAA;oBAAA,QACJ;kBAAA;oBAAA;oBAAA;oBAAA;kBAAA;gBACT;kBAAA;kBAAA;kBAAA;gBAAA;cACJ;gBAAA;gBAAA;gBAAA;cAAA;YACL;cAAA;cAAA;cAAA;YAAA,QAIb;UAAC;YAAA;YAAA;YAAA;UAAA;QACA;UAAA;UAAA;UAAA;QAAA;MACJ;QAAA;QAAA;QAAA;MAAA,QAEJ;IAAA,gBACP;EAEX;AACJ,CAAC;AAAA,GA9FK1B,SAAS;AAAA,KAATA,SAAS;AAgGf,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}