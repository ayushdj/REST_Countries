{"ast":null,"code":"import base_url from \"../util/baseUrl\";\n\n/**\n * Gets all country information\n * @returns a Promise\n */\nconst getAllCountries = () => fetch(base_url + `/all`, {\n  method: 'GET',\n  headers: {\n    Accept: 'application/json'\n  }\n});\n\n/**\n * Gets information specific to one country\n * @param {*} countryName the name of the country\n * @returns a Promise\n */\nconst getCountryByName = countryName => fetch(base_url + `/name/${countryName}/?fullText=true`, {\n  method: 'GET',\n  headers: {\n    Accept: 'application/json'\n  }\n});\n\n/**\n * Gets all the countries for a set of country codes\n * @param {*} countryCodes the joined comma separated string with all the country codes\n * @returns a Promise\n */\nconst getBorderInformation = countryCodes => fetch(`https://restcountries.com/v2/alpha?codes=${countryCodes}`);\n\n/**\n * We want to validate the response we get from all these API calls \n * @param {*} response the response object returned from fetch\n * @returns a string that we need to set for the error\n */\nconst validateResponse = response => {\n  if (response.status >= 300 && response.status <= 399) {\n    return response.status + \" Error: \" + response.statusText;\n  } else if (response.status >= 400 && response.status <= 499) {\n    return response.status + \" Client Error: \" + response.statusText;\n  } else if (response.status >= 500 && response.status <= 599) {\n    return response.status + \" Server Error: \" + response.statusText;\n  } else if (response.status >= 100 && response.status <= 199) {\n    return response.status + \" Information Response: Processing Request\";\n  } else {\n    return '';\n  }\n};\nconst functions = {\n  getAllCountries,\n  getCountryByName,\n  getBorderInformation,\n  validateResponse\n};\nexport default functions;","map":{"version":3,"names":["base_url","getAllCountries","fetch","method","headers","Accept","getCountryByName","countryName","getBorderInformation","countryCodes","validateResponse","response","status","statusText","functions"],"sources":["/Users/ayushdhananjai/REST_Countries/src/api/api.js"],"sourcesContent":["import base_url from \"../util/baseUrl\";\n\n/**\n * Gets all country information\n * @returns a Promise\n */\nconst getAllCountries = () => fetch(base_url + `/all`, {\n    method: 'GET',\n    headers: {\n        Accept: 'application/json',\n    },\n});\n\n/**\n * Gets information specific to one country\n * @param {*} countryName the name of the country\n * @returns a Promise\n */\nconst getCountryByName = (countryName) => fetch(base_url + `/name/${countryName}/?fullText=true`, {\n    method: 'GET',\n    headers: {\n        Accept: 'application/json',\n    },\n})\n\n/**\n * Gets all the countries for a set of country codes\n * @param {*} countryCodes the joined comma separated string with all the country codes\n * @returns a Promise\n */\nconst getBorderInformation = (countryCodes) => fetch(`https://restcountries.com/v2/alpha?codes=${countryCodes}`);\n\n/**\n * We want to validate the response we get from all these API calls \n * @param {*} response the response object returned from fetch\n * @returns a string that we need to set for the error\n */\nconst validateResponse = (response) => {\n    if (response.status >= 300 && response.status <= 399) {\n        return response.status + \" Error: \" + response.statusText;\n    } else if (response.status >= 400 && response.status <= 499) {\n        return response.status + \" Client Error: \" + response.statusText;\n    } else if (response.status >= 500 && response.status <= 599) {\n        return response.status + \" Server Error: \" + response.statusText;\n    } else if (response.status >= 100 && response.status <= 199) {\n        return response.status + \" Information Response: Processing Request\";\n    } else {\n        return '';\n    }\n}\n\nconst functions = {getAllCountries, getCountryByName, getBorderInformation, validateResponse}\n\nexport default functions;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,iBAAiB;;AAEtC;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,MAAMC,KAAK,CAACF,QAAQ,GAAI,MAAK,EAAE;EACnDG,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE;IACLC,MAAM,EAAE;EACZ;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAIC,WAAW,IAAKL,KAAK,CAACF,QAAQ,GAAI,SAAQO,WAAY,iBAAgB,EAAE;EAC9FJ,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE;IACLC,MAAM,EAAE;EACZ;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,MAAMG,oBAAoB,GAAIC,YAAY,IAAKP,KAAK,CAAE,4CAA2CO,YAAa,EAAC,CAAC;;AAEhH;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAIC,QAAQ,IAAK;EACnC,IAAIA,QAAQ,CAACC,MAAM,IAAI,GAAG,IAAID,QAAQ,CAACC,MAAM,IAAI,GAAG,EAAE;IAClD,OAAOD,QAAQ,CAACC,MAAM,GAAG,UAAU,GAAGD,QAAQ,CAACE,UAAU;EAC7D,CAAC,MAAM,IAAIF,QAAQ,CAACC,MAAM,IAAI,GAAG,IAAID,QAAQ,CAACC,MAAM,IAAI,GAAG,EAAE;IACzD,OAAOD,QAAQ,CAACC,MAAM,GAAG,iBAAiB,GAAGD,QAAQ,CAACE,UAAU;EACpE,CAAC,MAAM,IAAIF,QAAQ,CAACC,MAAM,IAAI,GAAG,IAAID,QAAQ,CAACC,MAAM,IAAI,GAAG,EAAE;IACzD,OAAOD,QAAQ,CAACC,MAAM,GAAG,iBAAiB,GAAGD,QAAQ,CAACE,UAAU;EACpE,CAAC,MAAM,IAAIF,QAAQ,CAACC,MAAM,IAAI,GAAG,IAAID,QAAQ,CAACC,MAAM,IAAI,GAAG,EAAE;IACzD,OAAOD,QAAQ,CAACC,MAAM,GAAG,2CAA2C;EACxE,CAAC,MAAM;IACH,OAAO,EAAE;EACb;AACJ,CAAC;AAED,MAAME,SAAS,GAAG;EAACb,eAAe;EAAEK,gBAAgB;EAAEE,oBAAoB;EAAEE;AAAgB,CAAC;AAE7F,eAAeI,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}