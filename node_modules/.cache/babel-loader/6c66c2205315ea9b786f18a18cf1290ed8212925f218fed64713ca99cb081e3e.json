{"ast":null,"code":"var _jsxFileName = \"/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/components/countries/countries.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './countries.css';\nimport { useState, useEffect, useRef } from 'react';\nimport { Link } from \"react-router-dom\";\nimport region_options from '../../util/regions';\nimport Select from 'react-select';\n\n/**\n * Represents all the countries - makes an API call to the countries API\n * upon loading the page\n * \n * @returns the Countries object\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Countries = () => {\n  _s();\n  /*\n      States:\n          allCountries: the local representation of the countries\n          isLoaded: a boolean flag that gets set to false once the\n                    countries have loaded\n          setError: if there is an error, this will show to the screen\n  */\n  const [allCountries, setAllCountries] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [currSearchText, setCurrSearchText] = useState('');\n  const [currRegion, setCurrRegion] = useState('');\n  const selectRegionRef = useRef();\n\n  /**\n   * Load the initial state of the data from the API\n   */\n  const retrieveAllData = async () => {\n    const response = await fetch(`https://restcountries.com/v2/all`, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n    if (!response.ok) {\n      setError(\"There was an error retrieving the data. Please reload the page and try again\");\n    }\n    const countries = await response.json();\n    // set the initial state in local storage\n    localStorage.setItem(\"rest_countries_initial_state\", JSON.stringify(countries));\n\n    // for (let i = 0; i < countries.length; i++) {\n    //     let currCountry = countries[i];\n    //     localStorage.setItem(currCountry.alpha3Code, currCountry.name);\n    // }\n\n    // set our state variables\n    setAllCountries(countries);\n    setIsLoaded(true);\n  };\n\n  /*\n      gets called upon loading the page\n  */\n  useEffect(() => {\n    retrieveAllData();\n  }, []);\n\n  /**\n   * The call back function that gets executed whenever the user\n   * filters countries by region.\n   * @param {} selectedRegion \n   * @returns N/A\n   */\n  const getCountriesByRegion = async selectedRegion => {\n    // If we have selected an actual region, then we make the async call\n    if (selectedRegion !== 'all') {\n      let lowerCaseRegion = selectedRegion.toLowerCase();\n      let initialState = localStorage.getItem(\"rest_countries_initial_state\");\n      let actualInitialState = JSON.parse(initialState);\n      let filteredCountriesByRegion = [];\n\n      // loop over the initial state \n      for (let i = 0; i < actualInitialState.length; i++) {\n        let currCountry = actualInitialState[i];\n        // if we have a previous search filter and we change the region, thn we need to let the user know\n        if (currSearchText !== '') {\n          if (currCountry.region.toLowerCase() === lowerCaseRegion && currCountry.name.toLowerCase().includes(currSearchText)) {\n            filteredCountriesByRegion.push(currCountry);\n          }\n        }\n        // if the search bar is empty, then we just need to check the region\n        else {\n          if (currCountry.region.toLowerCase() === lowerCaseRegion) {\n            filteredCountriesByRegion.push(currCountry);\n          }\n        }\n      }\n      // if there is a previous search bar word that isn't a valid country,\n      // then we have to let the user know\n      if (filteredCountriesByRegion.length === 0) {\n        setError(\"Invalid search - Please try again\");\n        setIsLoaded(true);\n      }\n      // \n      else {\n        setAllCountries(filteredCountriesByRegion);\n        setError(\"\");\n        setIsLoaded(true);\n        setCurrRegion(selectedRegion);\n      }\n    }\n    // If the user selects all, then we just retrieve all the data again.\n    else {\n      // retrieveAllData();\n      setCurrRegion('');\n      let initialState = localStorage.getItem(\"rest_countries_initial_state\");\n      let actualInitialState = JSON.parse(initialState);\n      let filteredCountriesByRegion = [];\n      if (currSearchText !== '') {\n        for (let i = 0; i < actualInitialState.length; i++) {\n          if (actualInitialState[i].name.toLowerCase().includes(currSearchText.toLowerCase())) {\n            filteredCountriesByRegion.push(actualInitialState[i]);\n          }\n        }\n        setAllCountries(filteredCountriesByRegion);\n        setError(\"\");\n      } else {\n        setAllCountries(actualInitialState);\n        setError(\"\");\n        setIsLoaded(true);\n      }\n      // window.location.reload();\n    }\n  };\n\n  /**\n   * The call back function that gets executed whenever\n   * a new character is being typed in the search bar \n   * @param searchVal the country we are searching for\n   */\n  const getCountriesBySearch = searchVal => {\n    // only if we have typed something do we execute the code\n    if (searchVal !== '') {\n      let lowerCaseSearchVal = searchVal.toLowerCase();\n      let initialState = localStorage.getItem(\"rest_countries_initial_state\");\n      let actualInitialState = JSON.parse(initialState);\n      const filteredCountries = [];\n      for (let i = 0; i < actualInitialState.length; i++) {\n        let currCountry = actualInitialState[i];\n        if (currRegion.toLowerCase() !== 'all' && currRegion !== '') {\n          if (currCountry.region.toLowerCase() === currRegion.toLowerCase()) {\n            if (currCountry.name.toLowerCase().includes(lowerCaseSearchVal)) {\n              filteredCountries.push(currCountry);\n            }\n          }\n        } else if (currRegion.toLowerCase() === 'all' || currRegion === '') {\n          if (currCountry.name.toLowerCase().includes(lowerCaseSearchVal)) {\n            filteredCountries.push(currCountry);\n          }\n        }\n      }\n      // If we haven't found any countries, then we need to \n      // let the user know.\n      if (filteredCountries.length === 0) {\n        setError(\"Invalid search. Please try again.\");\n        setIsLoaded(true);\n      }\n      // If we have found countries, then we set the error to be empty.\n      else {\n        setError(\"\");\n        setIsLoaded(true);\n        setAllCountries(filteredCountries);\n      }\n    }\n    // if there is nothing in the search bar, then we simply retrieve the countries\n    // from local storage\n    else {\n      let initialState = localStorage.getItem(\"rest_countries_initial_state\");\n      let actualInitialState = JSON.parse(initialState);\n      if (currRegion !== '') {\n        let filteredByCountries = [];\n        for (let i = 0; i < actualInitialState.length; i++) {\n          if (actualInitialState[i].region.toLowerCase() === currRegion.toLowerCase()) {\n            filteredByCountries.push(actualInitialState[i]);\n          }\n        }\n        setAllCountries(filteredByCountries);\n      } else {\n        setAllCountries(actualInitialState);\n      }\n    }\n  };\n\n  /**\n   * If we have an error we need to let the user know\n   */\n  if (error !== \"\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"global\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"flex flex-row justify-between flex-wrap search_bar_and_filter\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"flex justify-between search_bar\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: e => e.preventDefault(),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"relative\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"absolute inset-y-0 left-0 flex items-center pl-2\",\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  class: \"fal fa-search\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              placeholder: \"Search for a country...\",\n              onChange: e => {\n                const val = document.getElementById(\"actual_search_bar\").value;\n                setCurrSearchText(val);\n                getCountriesBySearch(val);\n              },\n              name: \"search\",\n              type: \"text\",\n              id: \"actual_search_bar\",\n              value: currSearchText,\n              class: \"h-10 w-96 rounded-md border-none search_bar_color\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"flex\",\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            className: \"region_filter\",\n            options: region_options,\n            value: region_options.value,\n            onChange: e => {\n              let selectedRegion = e.value;\n              setCurrRegion(selectedRegion);\n              getCountriesByRegion(selectedRegion);\n            },\n            components: {\n              IndicatorSeparator: () => null\n            },\n            styles: {\n              control: (baseStyles, state) => ({\n                ...baseStyles,\n                border: 'none',\n                backgroundColor: state.isSelected ? \"hsl(209,23%,22%)\" : \"hsl(209,23%,22%)\",\n                textDecoration: state.isSelected ? \"white\" : \"black\"\n              })\n            },\n            placeholder: \"Filter by Region\",\n            ref: selectRegionRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"countries\",\n          class: \"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            selected: true,\n            children: \"Choose a country\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"US\",\n            children: \"United States\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"CA\",\n            children: \"Canada\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"FR\",\n            children: \"France\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"DE\",\n            children: \"Germany\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this);\n  }\n  /**\n   * skeleton loading - need to let the user know that the data is\n   * on its way, so the user isn't left sitting with an empty screen\n   * wondering what is going on.\n   */else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading_msg text-9xl flex justify-center  place-items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"center\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 94\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 16\n    }, this);\n  }\n  /**\n   * If everything works correctly, then we load the countries.\n   */else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"global\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"flex flex-row justify-between flex-wrap search_bar_and_filter\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"flex justify-between search_bar\",\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: e => e.preventDefault(),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"relative\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  class: \"absolute inset-y-0 left-0 flex items-center pl-2\",\n                  children: /*#__PURE__*/_jsxDEV(\"i\", {\n                    class: \"fal fa-search\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 278,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 277,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                placeholder: \"Search for a country...\",\n                onChange: e => {\n                  const val = document.getElementById(\"actual_search_bar\").value;\n                  setCurrSearchText(val);\n                  getCountriesBySearch(val);\n                },\n                name: \"search\",\n                type: \"text\",\n                id: \"actual_search_bar\",\n                value: currSearchText,\n                class: \"h-10 w-96 rounded-md border-none search_bar_color\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"flex\",\n            children: [/*#__PURE__*/_jsxDEV(Select, {\n              className: \"region_filter\",\n              options: region_options,\n              value: region_options.value,\n              onChange: e => {\n                let selectedRegion = e.value;\n                setCurrRegion(selectedRegion);\n                getCountriesByRegion(selectedRegion);\n              },\n              components: {\n                IndicatorSeparator: () => null\n              },\n              styles: {\n                control: (baseStyles, state) => ({\n                  ...baseStyles,\n                  border: 'none',\n                  backgroundColor: state.isSelected ? \"hsl(209,23%,22%)\" : \"hsl(209,23%,22%)\",\n                  textDecoration: state.isSelected ? \"white\" : \"black\"\n                })\n              },\n              placeholder: \"Filter by Region\",\n              ref: selectRegionRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"countries\",\n              class: \"\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                selected: true,\n                children: \"Choose a country\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"US\",\n                children: \"United States\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"CA\",\n                children: \"Canada\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"FR\",\n                children: \"France\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"DE\",\n                children: \"Germany\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8 mt-5\",\n          children: allCountries.map((each, idx) => /*#__PURE__*/_jsxDEV(Link, {\n            to: `/specificCountry/${each.name}`,\n            style: {\n              textDecoration: 'none',\n              color: 'white'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"overflow-hidden rounded shadow-md flex flex-col h-full cursor-pointer hover:scale-105 duration-300 mb-8 card_body w=[200px]\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: each.flags.png,\n                alt: \"country_image\",\n                class: \"w-full h-32 object-cover\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pl-4 \",\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  class: \"font-bold mt-4 card_title\",\n                  children: each.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 324,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  class: \"block actual_population\",\n                  children: [\"Population: \", each.population.toLocaleString()]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 325,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  class: \"block actual_region\",\n                  children: [\"Region: \", each.region]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 326,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  class: \"block actual_capital\",\n                  children: [\"Capital: \", each.capital]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }\n};\n_s(Countries, \"v6UhPMYoJ63XF4WsuRceJdYfoE8=\");\n_c = Countries;\nexport default Countries;\nvar _c;\n$RefreshReg$(_c, \"Countries\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Link","region_options","Select","Countries","allCountries","setAllCountries","isLoaded","setIsLoaded","error","setError","currSearchText","setCurrSearchText","currRegion","setCurrRegion","selectRegionRef","retrieveAllData","response","fetch","method","headers","Accept","ok","countries","json","localStorage","setItem","JSON","stringify","getCountriesByRegion","selectedRegion","lowerCaseRegion","toLowerCase","initialState","getItem","actualInitialState","parse","filteredCountriesByRegion","i","length","currCountry","region","name","includes","push","getCountriesBySearch","searchVal","lowerCaseSearchVal","filteredCountries","filteredByCountries","e","preventDefault","val","document","getElementById","value","IndicatorSeparator","control","baseStyles","state","border","backgroundColor","isSelected","textDecoration","map","each","idx","color","flags","png","population","toLocaleString","capital"],"sources":["/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/components/countries/countries.jsx"],"sourcesContent":["import React from 'react';\nimport './countries.css';\nimport {useState, useEffect, useRef} from 'react';\nimport { Link } from \"react-router-dom\";\nimport region_options from '../../util/regions';\nimport Select from 'react-select';\n\n/**\n * Represents all the countries - makes an API call to the countries API\n * upon loading the page\n * \n * @returns the Countries object\n */\nconst Countries = () => {\n\n    /*\n        States:\n            allCountries: the local representation of the countries\n            isLoaded: a boolean flag that gets set to false once the\n                      countries have loaded\n            setError: if there is an error, this will show to the screen\n    */\n    const [allCountries, setAllCountries] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [error, setError] = useState(\"\");\n    const [currSearchText, setCurrSearchText] = useState('');\n    const [currRegion, setCurrRegion] = useState('');\n    const selectRegionRef = useRef();\n\n\n    /**\n     * Load the initial state of the data from the API\n     */\n    const retrieveAllData = async () => {\n        const response = await fetch(`https://restcountries.com/v2/all`, {\n                method: 'GET',\n                headers: {\n                    Accept: 'application/json',\n                },\n             });\n        if (!response.ok) {\n            setError(\"There was an error retrieving the data. Please reload the page and try again\");\n        }\n        const countries = await response.json();\n        // set the initial state in local storage\n        localStorage.setItem(\"rest_countries_initial_state\", JSON.stringify(countries));\n\n        // for (let i = 0; i < countries.length; i++) {\n        //     let currCountry = countries[i];\n        //     localStorage.setItem(currCountry.alpha3Code, currCountry.name);\n        // }\n\n        // set our state variables\n        setAllCountries(countries);\n        setIsLoaded(true);\n    }\n\n\n    /*\n        gets called upon loading the page\n    */\n    useEffect(() => {\n        retrieveAllData();\n    },[]);\n\n    /**\n     * The call back function that gets executed whenever the user\n     * filters countries by region.\n     * @param {} selectedRegion \n     * @returns N/A\n     */\n    const getCountriesByRegion = async (selectedRegion) => {\n        // If we have selected an actual region, then we make the async call\n        if (selectedRegion !== 'all') {\n\n            let lowerCaseRegion = selectedRegion.toLowerCase();\n            let initialState = localStorage.getItem(\"rest_countries_initial_state\");\n            let actualInitialState = JSON.parse(initialState);\n            let filteredCountriesByRegion = [];\n\n            // loop over the initial state \n            for (let i = 0; i < actualInitialState.length; i++){\n                let currCountry = actualInitialState[i];\n                // if we have a previous search filter and we change the region, thn we need to let the user know\n                if (currSearchText !== '') {\n                    if (currCountry.region.toLowerCase() === lowerCaseRegion && currCountry.name.toLowerCase().includes(currSearchText)) {\n                        filteredCountriesByRegion.push(currCountry);\n                    }\n                } \n                // if the search bar is empty, then we just need to check the region\n                else {\n                    if (currCountry.region.toLowerCase() === lowerCaseRegion) {\n                        filteredCountriesByRegion.push(currCountry);\n                    }\n                }\n\n            }\n            // if there is a previous search bar word that isn't a valid country,\n            // then we have to let the user know\n            if (filteredCountriesByRegion.length === 0) {\n                setError(\"Invalid search - Please try again\");\n                setIsLoaded(true);\n            } \n            // \n            else {\n                setAllCountries(filteredCountriesByRegion);\n                setError(\"\");\n                setIsLoaded(true);\n                setCurrRegion(selectedRegion);\n            }\n\n        } \n        // If the user selects all, then we just retrieve all the data again.\n        else {\n            // retrieveAllData();\n            setCurrRegion('');\n            let initialState = localStorage.getItem(\"rest_countries_initial_state\");\n            let actualInitialState = JSON.parse(initialState);\n            let filteredCountriesByRegion = [];\n            if (currSearchText !== '') {\n                for (let i = 0; i < actualInitialState.length; i++) {\n                    if (actualInitialState[i].name.toLowerCase().includes(currSearchText.toLowerCase())) {\n                        filteredCountriesByRegion.push(actualInitialState[i]);\n                    }\n                }\n                setAllCountries(filteredCountriesByRegion);\n                setError(\"\");\n            } else {\n                setAllCountries(actualInitialState);\n                setError(\"\");\n                setIsLoaded(true);\n            }\n            // window.location.reload();\n        }\n    }\n\n    /**\n     * The call back function that gets executed whenever\n     * a new character is being typed in the search bar \n     * @param searchVal the country we are searching for\n     */\n    const getCountriesBySearch = (searchVal) => {\n\n        // only if we have typed something do we execute the code\n        if (searchVal !== '') {\n            let lowerCaseSearchVal = searchVal.toLowerCase();\n            let initialState = localStorage.getItem(\"rest_countries_initial_state\");\n            let actualInitialState = JSON.parse(initialState);\n            const filteredCountries = [];\n            for (let i = 0; i < actualInitialState.length; i++) {\n                let currCountry = actualInitialState[i];\n                if (currRegion.toLowerCase() !== 'all' && currRegion !== '') {\n                    if (currCountry.region.toLowerCase() === currRegion.toLowerCase()) {\n                        if (currCountry.name.toLowerCase().includes(lowerCaseSearchVal)) {\n                            filteredCountries.push(currCountry);\n                        }\n                    }\n                } else if (currRegion.toLowerCase() === 'all' || currRegion === '') {\n                    if (currCountry.name.toLowerCase().includes(lowerCaseSearchVal)) {\n                        filteredCountries.push(currCountry);\n                    }\n                }\n            }\n            // If we haven't found any countries, then we need to \n            // let the user know.\n            if (filteredCountries.length === 0) {\n                setError(\"Invalid search. Please try again.\");\n                setIsLoaded(true);\n            } \n            // If we have found countries, then we set the error to be empty.\n            else {\n                setError(\"\");\n                setIsLoaded(true);\n                setAllCountries(filteredCountries);\n            }\n        } \n        // if there is nothing in the search bar, then we simply retrieve the countries\n        // from local storage\n        else {\n            let initialState = localStorage.getItem(\"rest_countries_initial_state\");\n            let actualInitialState = JSON.parse(initialState);\n            if (currRegion !== '') {\n                let filteredByCountries = [];\n                for (let i = 0; i < actualInitialState.length; i++) {\n                    if (actualInitialState[i].region.toLowerCase() === currRegion.toLowerCase()) {\n                        filteredByCountries.push(actualInitialState[i]);\n                    }\n                }\n                setAllCountries(filteredByCountries);\n            } else {\n                setAllCountries(actualInitialState);\n            }\n        }\n    }\n  \n    /**\n     * If we have an error we need to let the user know\n     */\n    if (error !== \"\") {\n        return (\n            <div className=\"global\">\n\n                <div class=\"flex flex-row justify-between flex-wrap search_bar_and_filter\">\n\n                \n                    <div class=\"flex justify-between search_bar\">\n                        <form onSubmit={(e) => e.preventDefault()}>\n                            <div class=\"relative\">\n                                <span class=\"absolute inset-y-0 left-0 flex items-center pl-2\">\n                                        <i class=\"fal fa-search\"></i>\n                                        </span>\n                            </div>\n                            <input placeholder='Search for a country...' onChange={(e) => {\n                                            const val = document.getElementById(\"actual_search_bar\").value;\n                                            setCurrSearchText(val);\n                                            getCountriesBySearch(val);\n                                        }} name=\"search\" type=\"text\" id=\"actual_search_bar\" value={currSearchText} class=\"h-10 w-96 rounded-md border-none search_bar_color\">\n                            \n                            </input>\n                        </form>\n                        \n\n                    </div>\n\n                    <div class=\"flex\">\n                    <Select className=\"region_filter\" options={region_options} value={region_options.value} onChange={(e) => {\n                                let selectedRegion = e.value;\n                                setCurrRegion(selectedRegion);\n                                getCountriesByRegion(selectedRegion);\n                            }} components={{\n                                IndicatorSeparator: () => null\n                                }} styles={{\n                                control: (baseStyles, state) => ({\n                                    ...baseStyles,\n                                    border:'none',\n                                    backgroundColor: state.isSelected ? \"hsl(209,23%,22%)\" : \"hsl(209,23%,22%)\",\n                                    textDecoration:state.isSelected ? \"white\" : \"black\",                               \n                                }),\n                                }} placeholder=\"Filter by Region\" ref={selectRegionRef}/>\n                    </div>\n                    <select id=\"countries\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\">\n                        <option selected>Choose a country</option>\n                        <option value=\"US\">United States</option>\n                        <option value=\"CA\">Canada</option>\n                        <option value=\"FR\">France</option>\n                        <option value=\"DE\">Germany</option>\n                    </select>\n                </div>\n                \n\n                 </div>\n\n        )\n    } \n    /**\n     * skeleton loading - need to let the user know that the data is\n     * on its way, so the user isn't left sitting with an empty screen\n     * wondering what is going on.\n     */\n    else if (!isLoaded) {\n        return <div className=\"loading_msg text-9xl flex justify-center  place-items-center\"><center>Loading...</center></div>\n    } \n    /**\n     * If everything works correctly, then we load the countries.\n     */\n    else {\n        return (\n            <>\n            <div className=\"global\">\n\n                <div class=\"flex flex-row justify-between flex-wrap search_bar_and_filter\">\n\n                \n                    <div class=\"flex justify-between search_bar\">\n                        <form onSubmit={(e) => e.preventDefault()}>\n                            <div class=\"relative\">\n                                <span class=\"absolute inset-y-0 left-0 flex items-center pl-2\">\n                                        <i class=\"fal fa-search\"></i>\n                                        </span>\n                            </div>\n                            <input placeholder='Search for a country...' onChange={(e) => {\n                                            const val = document.getElementById(\"actual_search_bar\").value;\n                                            setCurrSearchText(val);\n                                            getCountriesBySearch(val);\n                                        }} name=\"search\" type=\"text\" id=\"actual_search_bar\" value={currSearchText} class=\"h-10 w-96 rounded-md border-none search_bar_color\">\n                            \n                            </input>\n                        </form>\n                        \n\n                    </div>\n\n                    <div class=\"flex\">\n                    <Select className=\"region_filter\" options={region_options} value={region_options.value} onChange={(e) => {\n                                let selectedRegion = e.value;\n                                setCurrRegion(selectedRegion);\n                                getCountriesByRegion(selectedRegion);\n                            }} components={{\n                                IndicatorSeparator: () => null\n                                }} styles={{\n                                control: (baseStyles, state) => ({\n                                    ...baseStyles,\n                                    border:'none',\n                                    backgroundColor: state.isSelected ? \"hsl(209,23%,22%)\" : \"hsl(209,23%,22%)\",\n                                    textDecoration:state.isSelected ? \"white\" : \"black\",                               \n                                }),\n                                }} placeholder=\"Filter by Region\" ref={selectRegionRef}/>\n                                <select id=\"countries\" class=\"\">\n                                <option selected>Choose a country</option>\n                                <option value=\"US\">United States</option>\n                                <option value=\"CA\">Canada</option>\n                                <option value=\"FR\">France</option>\n                                <option value=\"DE\">Germany</option>\n                                </select>\n                    </div>\n                </div>\n                <div class=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8 mt-5\"> \n                    {allCountries.map((each, idx) => (\n                            <Link to={`/specificCountry/${each.name}`} style={{textDecoration:'none', color:'white'}}>\n                                <div class=\"overflow-hidden rounded shadow-md flex flex-col h-full cursor-pointer hover:scale-105 duration-300 mb-8\n                                card_body w=[200px]\">\n                                    <img src={each.flags.png} alt=\"country_image\" class=\"w-full h-32 object-cover\"/>\n                                    <div className='pl-4 '>\n                                        <h5 class=\"font-bold mt-4 card_title\">{each.name}</h5>\n                                        <span class=\"block actual_population\">Population: {each.population.toLocaleString()}</span>\n                                        <span class=\"block actual_region\">Region: {each.region}</span> \n                                        <span class=\"block actual_capital\">Capital: {each.capital}</span>\n                                    </div>\n\n                                </div>\n                            </Link>\n                                \n                        \n                    ))}\n                    </div>\n                \n\n                 </div>\n            </>\n        )\n    }\n}\n\nexport default Countries;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}