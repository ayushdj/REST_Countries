{"ast":null,"code":"var _jsxFileName = \"/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/components/countries/countries.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './countries.css';\nimport { useState, useEffect } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\nimport { Link } from \"react-router-dom\";\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Select from 'react-select';\n\n/**\n * Represents all the countries - makes an API call to the countries API\n * upon loading the page\n * \n * @returns the Countries object\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Countries = () => {\n  _s();\n  /*\n      States:\n          allCountries: the local representation of the countries\n          isLoaded: a boolean flag that gets set to false once the\n                    countries have loaded\n          setError: if there is an error, this will show to the screen\n  */\n  const [allCountries, setAllCountries] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(null);\n  const [region, setRegion] = useState('');\n\n  /*\n      gets called upon loading the page\n  */\n  useEffect(() => {\n    // fetch(`https://restcountries.com/v3.1/all`, {\n    //     mode:'no-cors'\n    // }).\n    //     then(response=> response.json()).then((json) => {\n    //         setIsLoaded(true);\n    //         setAllCountries(json);\n    //         console.log(allCountries);\n    //     }).catch(err => {\n    //         setIsLoaded(true);\n    //         setError(err);\n    //     })\n    const fetchCountryData = async () => {\n      const response = await fetch(`https://restcountries.com/v3.1/all`, {\n        mode: 'no-cors'\n      });\n    };\n  }, []);\n  const getCountriesByRegion = selectedRegion => {\n    setIsLoaded(false);\n    fetch(`https://restcountries.com/v2/region/${selectedRegion}`, {\n      mode: 'no-cors'\n    }).then(response => response.json()).then(json => {\n      setIsLoaded(true);\n      setAllCountries(json);\n    }).catch(err => {\n      setIsLoaded(true);\n      setError(err);\n    });\n  };\n  const options = [{\n    value: 'africa',\n    label: 'Africa'\n  }, {\n    value: 'americas',\n    label: 'America'\n  }, {\n    value: 'asia',\n    label: 'Asia'\n  }, {\n    value: 'europe',\n    label: 'Europe'\n  }, {\n    value: 'oceania',\n    label: 'Oceania'\n  }];\n\n  /**\n   * If we have an error we need to let the user know\n   */\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 16\n    }, this);\n  }\n  /**\n   * skeleton loading - need to let the user know that the data is\n   * on its way, so the user isn't left sitting with an empty screen\n   * wondering what is going on.\n   */else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container countries_header\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 16\n    }, this);\n  }\n  // /**\n  //  * If everything works correctly, then we load the countries.\n  //  */\n  // else {\n  //     return (\n  //         <>\n\n  //             <div className=\"search_bar_and_filter\">\n\n  //             <Row >\n  //                 <Col xs=\"6\">\n  //                     <div>\n  //                         hi hello\n  //                     </div>\n  //                 </Col>\n\n  //                 <Col xs=\"12\"> \n  //                     <div className=\"region_filter\">\n  //                         {/* <select id=\"__region_select__\" className='custom-select' title=\"select a region\" onChange={(e) => {\n  //                             let selectedRegion = e.target.value;\n  //                             setRegion(selectedRegion);\n  //                             getCountriesByRegion(region);\n  //                         }} value={regions.name}>\n  //                             <option value=\"Africa\">Africa</option>\n  //                             <option value=\"Americas\">Americas</option>\n  //                             <option value=\"Asia\">Asia</option>\n  //                             <option value=\"Europe\">Europe</option>\n  //                             <option value=\"Oceania\">Oceania</option>\n  //                         </select> */}\n  //                         <Select options={options} value={options.value} className=\"react-select-container\" onChange={(e) => {\n  //                             let selectedRegion = e.value;\n  //                             setRegion(selectedRegion);\n  //                             console.log(selectedRegion);\n  //                             getCountriesByRegion(selectedRegion);\n  //                         }}/>\n  //                     </div>\n  //                     <span style={{color:\"white\"}}>{region}</span>\n  //                 </Col>\n  //             </Row>\n  //             </div>\n\n  //             <div className=\"countries_main_div\">\n  //                 <div className=\"actual_all_countries_block\">\n  //                     <Row className=\"g-4\" xs={1} sm={2} md={2} lg={3} xl={4} xxl={4}> \n  //                         {allCountries.map((each, idx) => (\n  //                             <Col>\n  //                                 <div className='parent_card'>\n  //                                     <Link to={`/specificCountry/${each.name}`} style={{textDecoration:'none'}}>\n  //                                         <Card  className = \"country_card border-0 mt-2 mr-4 d-flex h-100\" onClick={() => console.log(\"CLICKED \" + each.name)}>\n  //                                             <Card.Img variant=\"top\" src={each.flags.png} className=\"card_image\"/>\n\n  //                                             <Card.Body className=\"card_body\">\n  //                                                 <Card.Title className=\"card_title\"><div>{each.name}</div></Card.Title>\n  //                                                 <Card.Text className=\"card_text\">\n  //                                                     <span className='card_stats'>Population: </span> <span className=\"actual_population\">{each.population.toLocaleString()}</span> <br/>\n  //                                                     <span className='card_stats'>Region: </span><span className=\"actual_region\">{each.region} </span><br/>\n  //                                                     <span className='card_stats'>Capital: </span><span className=\"actual_capital\"> {each.capital}</span>\n  //                                                 </Card.Text>\n  //                                             </Card.Body>\n  //                                         </Card>\n  //                                     </Link>\n  //                                 </div>\n\n  //                             </Col>  \n\n  //                         ))}\n  //                     </Row>\n  //                 </div>\n\n  //             </div>\n  //         </>\n  //     )\n  // }\n};\n_s(Countries, \"yFOUVZ4fhvWpLs4RFkkJX4xDQWk=\");\n_c = Countries;\nexport default Countries;\nvar _c;\n$RefreshReg$(_c, \"Countries\");","map":{"version":3,"names":["React","useState","useEffect","Card","Col","Row","Container","Link","Dropdown","DropdownButton","Select","Countries","allCountries","setAllCountries","isLoaded","setIsLoaded","error","setError","region","setRegion","fetchCountryData","response","fetch","mode","getCountriesByRegion","selectedRegion","then","json","catch","err","options","value","label","message"],"sources":["/Users/ayushdhananjai/Documents/Padlet_Interview/ayush_countries_page/ayush_countries/src/components/countries/countries.jsx"],"sourcesContent":["import React from 'react';\nimport './countries.css';\nimport {useState, useEffect} from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Container from 'react-bootstrap/Container';\nimport { Link } from \"react-router-dom\";\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Select from 'react-select';\n\n\n\n/**\n * Represents all the countries - makes an API call to the countries API\n * upon loading the page\n * \n * @returns the Countries object\n */\nconst Countries = () => {\n\n    /*\n        States:\n            allCountries: the local representation of the countries\n            isLoaded: a boolean flag that gets set to false once the\n                      countries have loaded\n            setError: if there is an error, this will show to the screen\n    */\n    const [allCountries, setAllCountries] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [error, setError] = useState(null);\n    const [region, setRegion] = useState('');\n\n    /*\n        gets called upon loading the page\n    */\n    useEffect(() => {\n        // fetch(`https://restcountries.com/v3.1/all`, {\n        //     mode:'no-cors'\n        // }).\n        //     then(response=> response.json()).then((json) => {\n        //         setIsLoaded(true);\n        //         setAllCountries(json);\n        //         console.log(allCountries);\n        //     }).catch(err => {\n        //         setIsLoaded(true);\n        //         setError(err);\n        //     })\n        const fetchCountryData = async () => {\n            const response = await fetch(`https://restcountries.com/v3.1/all`, {\n                    mode:'no-cors'\n                 });\n        }\n    },[]);\n\n    \n\n\n    const getCountriesByRegion = (selectedRegion) => {\n        setIsLoaded(false);\n        fetch(`https://restcountries.com/v2/region/${selectedRegion}`, {\n            mode:'no-cors'\n        }).\n        then(response => response.json()).then((json) => {\n            setIsLoaded(true);\n            setAllCountries(json);\n        }).catch(err => {\n            setIsLoaded(true);\n            setError(err);\n        })\n    }\n\n    const options = [\n        { value: 'africa', label: 'Africa' },\n        { value: 'americas', label: 'America' },\n        { value: 'asia', label: 'Asia' },\n        { value: 'europe', label: 'Europe' },\n        { value: 'oceania', label: 'Oceania' }\n      ]\n\n  \n    /**\n     * If we have an error we need to let the user know\n     */\n    if (error) {\n        return <div>Error: {error.message}</div>\n    } \n    /**\n     * skeleton loading - need to let the user know that the data is\n     * on its way, so the user isn't left sitting with an empty screen\n     * wondering what is going on.\n     */\n    else if (!isLoaded) {\n        return <div className=\"container countries_header\">Loading...</div>\n    } \n    // /**\n    //  * If everything works correctly, then we load the countries.\n    //  */\n    // else {\n    //     return (\n    //         <>\n\n    //             <div className=\"search_bar_and_filter\">\n\n                \n    //             <Row >\n    //                 <Col xs=\"6\">\n    //                     <div>\n    //                         hi hello\n    //                     </div>\n    //                 </Col>\n\n    //                 <Col xs=\"12\"> \n    //                     <div className=\"region_filter\">\n    //                         {/* <select id=\"__region_select__\" className='custom-select' title=\"select a region\" onChange={(e) => {\n    //                             let selectedRegion = e.target.value;\n    //                             setRegion(selectedRegion);\n    //                             getCountriesByRegion(region);\n    //                         }} value={regions.name}>\n    //                             <option value=\"Africa\">Africa</option>\n    //                             <option value=\"Americas\">Americas</option>\n    //                             <option value=\"Asia\">Asia</option>\n    //                             <option value=\"Europe\">Europe</option>\n    //                             <option value=\"Oceania\">Oceania</option>\n    //                         </select> */}\n    //                         <Select options={options} value={options.value} className=\"react-select-container\" onChange={(e) => {\n    //                             let selectedRegion = e.value;\n    //                             setRegion(selectedRegion);\n    //                             console.log(selectedRegion);\n    //                             getCountriesByRegion(selectedRegion);\n    //                         }}/>\n    //                     </div>\n    //                     <span style={{color:\"white\"}}>{region}</span>\n    //                 </Col>\n    //             </Row>\n    //             </div>\n\n                \n    //             <div className=\"countries_main_div\">\n    //                 <div className=\"actual_all_countries_block\">\n    //                     <Row className=\"g-4\" xs={1} sm={2} md={2} lg={3} xl={4} xxl={4}> \n    //                         {allCountries.map((each, idx) => (\n    //                             <Col>\n    //                                 <div className='parent_card'>\n    //                                     <Link to={`/specificCountry/${each.name}`} style={{textDecoration:'none'}}>\n    //                                         <Card  className = \"country_card border-0 mt-2 mr-4 d-flex h-100\" onClick={() => console.log(\"CLICKED \" + each.name)}>\n    //                                             <Card.Img variant=\"top\" src={each.flags.png} className=\"card_image\"/>\n                                                \n    //                                             <Card.Body className=\"card_body\">\n    //                                                 <Card.Title className=\"card_title\"><div>{each.name}</div></Card.Title>\n    //                                                 <Card.Text className=\"card_text\">\n    //                                                     <span className='card_stats'>Population: </span> <span className=\"actual_population\">{each.population.toLocaleString()}</span> <br/>\n    //                                                     <span className='card_stats'>Region: </span><span className=\"actual_region\">{each.region} </span><br/>\n    //                                                     <span className='card_stats'>Capital: </span><span className=\"actual_capital\"> {each.capital}</span>\n    //                                                 </Card.Text>\n    //                                             </Card.Body>\n    //                                         </Card>\n    //                                     </Link>\n    //                                 </div>\n                                    \n    //                             </Col>  \n                                \n    //                         ))}\n    //                     </Row>\n    //                 </div>\n                    \n    //             </div>\n    //         </>\n    //     )\n    // }\n}\n\nexport default Countries;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}